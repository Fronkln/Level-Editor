using System;
using System.IO;
using UnityEngine;
using UnityEngine.UI;

namespace Jhrino.MFPLevelEditor
{
	// Token: 0x020000EB RID: 235
	public static class MFPEditorUtils
	{
		// Token: 0x0600064F RID: 1615 RVA: 0x00095130 File Offset: 0x00093330
		public static Texture2D LoadPNG(string filePath)
		{
			Texture2D texture2D = null;
			if (File.Exists(filePath))
			{
				byte[] data = File.ReadAllBytes(filePath);
				texture2D = new Texture2D(2, 2);
				texture2D.LoadImage(data);
			}
			return texture2D;
		}

		// Token: 0x06000650 RID: 1616 RVA: 0x0000505E File Offset: 0x0000325E
		public static string LoadFileFromDataFolder(string file)
		{
			return Application.dataPath + "/LevelEditor_Jhrino/" + file;
		}

		public enum UIAnchor
		{
			topLeft,
			topMiddle,
			topRight,

			middleLeft,
			middle,
			middleRight,

			bottomLeft,
			bottomMiddle,
			bottomRight
		}



		public static Vector2 ReturnAnchor(UIAnchor uIAnchor)
		{
			switch(uIAnchor)
			{
				default:
					return new Vector2(0,0);

				case UIAnchor.bottomLeft:
					return new Vector2(0,0);
				case UIAnchor.bottomMiddle:
					return new Vector2(0.5f, 0);
				case UIAnchor.bottomRight:
					return new Vector2(1, 0);
				case UIAnchor.middleLeft:
					return new Vector2(0, 0.5f);
				case UIAnchor.middle:
					return new Vector2(0.5f, 0.5f);
				case UIAnchor.middleRight:
					return new Vector2(1, 0.5f);
				case UIAnchor.topLeft:
					return new Vector2(0, 1);
				case UIAnchor.topMiddle:
					return new Vector2(0.5f, 1);
				case UIAnchor.topRight:
					return new Vector2(1,1);
			}
		}
		
		public static Button ReturnCreateNewButton(UIAnchor uianch, Vector2 anchoredPosition, Vector2 sizeDelta, Vector2 pivot, Vector3 localSize, GameObject parent = null, string name = "New Button", string imageSource = "", Selectable.Transition buttonTransition = Selectable.Transition.ColorTint)
		{
			
			GameObject createdButtonObject = new GameObject();
			createdButtonObject.transform.parent = parent.transform;
			createdButtonObject.name = name;
			createdButtonObject.layer = 5;

			RectTransform buttonRect = createdButtonObject.AddComponent<RectTransform>();

			buttonRect.pivot = pivot;

			buttonRect.anchorMin = ReturnAnchor(uianch);
			buttonRect.anchorMax = ReturnAnchor(uianch);

			buttonRect.sizeDelta = sizeDelta;

			buttonRect.anchoredPosition = anchoredPosition;

			Image buttonImage = createdButtonObject.AddComponent<Image>();

			if(imageSource != "")
			{
				Texture2D buttonTexture = LoadPNG(LoadFileFromDataFolder(imageSource));
				Sprite buttonSprite = Sprite.Create(buttonTexture, new Rect(0f, 0f, buttonTexture.width, buttonTexture.height), new Vector2(0f, 0f), 100f);
			
				buttonImage.sprite = buttonSprite;
			}

			Button newButton = createdButtonObject.AddComponent<Button>();
			newButton.transition = buttonTransition;
			newButton.targetGraphic = buttonImage;

			return newButton;
		}

		public static void CreateNewButton(UIAnchor uianch, Vector2 anchoredPosition, Vector2 sizeDelta, Vector2 pivot, Vector3 localSize, GameObject parent = null, string name = "New Button", string imageSource = "", Selectable.Transition buttonTransition = Selectable.Transition.ColorTint)
		{
			
			GameObject createdButtonObject = new GameObject();
			createdButtonObject.transform.parent = parent.transform;
			createdButtonObject.name = name;
			createdButtonObject.layer = 5;

			RectTransform buttonRect = createdButtonObject.AddComponent<RectTransform>();

			buttonRect.pivot = pivot;

			buttonRect.anchorMin = ReturnAnchor(uianch);
			buttonRect.anchorMax = ReturnAnchor(uianch);

			buttonRect.sizeDelta = sizeDelta;

			buttonRect.anchoredPosition = anchoredPosition;

			Image buttonImage = createdButtonObject.AddComponent<Image>();

			if(imageSource != "")
			{
				Texture2D buttonTexture = LoadPNG(LoadFileFromDataFolder(imageSource));
				Sprite buttonSprite = Sprite.Create(buttonTexture, new Rect(0f, 0f, buttonTexture.width, buttonTexture.height), new Vector2(0f, 0f), 100f);
			
				buttonImage.sprite = buttonSprite;
			}

			Button newButton = createdButtonObject.AddComponent<Button>();
			newButton.transition = buttonTransition;
			newButton.targetGraphic = buttonImage;
		}


		public static Text ReturnCreateNewText(UIAnchor uianch, TextAnchor textAlign, Vector2 anchoredPosition, Vector2 sizeDelta, Vector2 pivot, Vector3 localSize,  Font font, Color32 textColor, VerticalWrapMode wrapV, HorizontalWrapMode wrapH, GameObject parent = null, string text = "", string name = "New Text", int fontSize = 16)
		{

			GameObject createdTextObject = new GameObject();
			createdTextObject.transform.parent = parent.transform;
			createdTextObject.name = name;
			createdTextObject.layer = 5;

			RectTransform textRect = createdTextObject.AddComponent<RectTransform>();

			textRect.pivot = pivot;
			textRect.anchorMin = ReturnAnchor(uianch);
			textRect.anchorMax = ReturnAnchor(uianch);

			Text newText = createdTextObject.AddComponent<Text>();

			newText.resizeTextForBestFit = false;
			newText.alignByGeometry = false;

			newText.font = font;
			newText.text = text;
			newText.lineSpacing = 1;
			newText.alignment = textAlign;

			newText.color = textColor;
			newText.fontSize = fontSize;
			
			textRect.localScale = localSize;

			newText.verticalOverflow = wrapV;
			newText.horizontalOverflow = wrapH;

			textRect.sizeDelta = sizeDelta;
			textRect.anchoredPosition = anchoredPosition;
			
			return newText;

		}

		public static void CreateNewText(UIAnchor uianch, TextAnchor textAlign, Vector2 anchoredPosition, Vector2 sizeDelta, Vector2 pivot, Vector3 localSize,  Font font, Color32 textColor, VerticalWrapMode wrapV, HorizontalWrapMode wrapH, GameObject parent = null, string text = "", string name = "New Text", int fontSize = 16)
		{

			GameObject createdTextObject = new GameObject();
			createdTextObject.transform.parent = parent.transform;
			createdTextObject.name = name;
			createdTextObject.layer = 5;

			RectTransform textRect = createdTextObject.AddComponent<RectTransform>();

			textRect.pivot = pivot;
			textRect.anchorMin = ReturnAnchor(uianch);
			textRect.anchorMax = ReturnAnchor(uianch);

			Text newText = createdTextObject.AddComponent<Text>();

			newText.resizeTextForBestFit = false;
			newText.alignByGeometry = false;

			newText.font = font;
			newText.text = text;
			newText.lineSpacing = 1;
			newText.alignment = textAlign;

			newText.color = textColor;
			newText.fontSize = fontSize;
			
			textRect.localScale = localSize;

			newText.verticalOverflow = wrapV;
			newText.horizontalOverflow = wrapH;

			textRect.sizeDelta = sizeDelta;
			textRect.anchoredPosition = anchoredPosition;

		}
	}
}
	