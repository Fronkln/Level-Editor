using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEngine;

namespace Jhrino.MFPLevelEditor
{
	// Token: 0x020000E5 RID: 229
	public sealed class FastObjImporter
	{
		// Token: 0x17000007 RID: 7
		// (get) Token: 0x06000637 RID: 1591 RVA: 0x00004FCD File Offset: 0x000031CD
		public static FastObjImporter Instance
		{
			get
			{
				FastObjImporter result;
				if ((result = FastObjImporter._instance) == null)
				{
					result = (FastObjImporter._instance = new FastObjImporter());
				}
				return result;
			}
		}

		// Token: 0x06000638 RID: 1592 RVA: 0x0009475C File Offset: 0x0009295C
		public Mesh ImportFile(string filePath)
		{
			this.triangles = new List<int>();
			this.vertices = new List<Vector3>();
			this.uv = new List<Vector2>();
			this.normals = new List<Vector3>();
			this.faceData = new List<Vector3Int>();
			this.intArray = new List<int>();
			this.LoadMeshData(filePath);
			Vector3[] array = new Vector3[this.faceData.Count];
			Vector2[] array2 = new Vector2[this.faceData.Count];
			Vector3[] array3 = new Vector3[this.faceData.Count];
			for (int i = 0; i < this.faceData.Count; i++)
			{
				array[i] = this.vertices[this.faceData[i].x - 1];
				if (this.faceData[i].y >= 1)
				{
					array2[i] = this.uv[this.faceData[i].y - 1];
				}
				if (this.faceData[i].z >= 1)
				{
					array3[i] = this.normals[this.faceData[i].z - 1];
				}
			}
			Mesh mesh = new Mesh();
			mesh.vertices = array;
			mesh.uv = array2;
			mesh.normals = array3;
			mesh.triangles = this.triangles.ToArray();
			mesh.RecalculateBounds();
			return mesh;
		}

		// Token: 0x06000639 RID: 1593 RVA: 0x000948CC File Offset: 0x00092ACC
		private void LoadMeshData(string fileName)
		{
			StringBuilder stringBuilder = new StringBuilder();
			string text = File.ReadAllText(fileName);
			int num = 0;
			string str = null;
			int num2 = 0;
			StringBuilder stringBuilder2 = new StringBuilder();
			for (int i = 0; i < text.Length; i++)
			{
				if (text[i] == '\n')
				{
					stringBuilder.Remove(0, stringBuilder.Length);
					stringBuilder.Append(text, num + 1, i - num);
					num = i;
					if (stringBuilder[0] == 'o' && stringBuilder[1] == ' ')
					{
						stringBuilder2.Remove(0, stringBuilder2.Length);
						for (int j = 2; j < stringBuilder.Length; j++)
						{
							str += stringBuilder[j].ToString();
						}
					}
					else if (stringBuilder[0] == 'v' && stringBuilder[1] == ' ')
					{
						int num3 = 2;
						this.vertices.Add(new Vector3(this.GetFloat(stringBuilder, ref num3, ref stringBuilder2), this.GetFloat(stringBuilder, ref num3, ref stringBuilder2), this.GetFloat(stringBuilder, ref num3, ref stringBuilder2)));
					}
					else if (stringBuilder[0] == 'v' && stringBuilder[1] == 't' && stringBuilder[2] == ' ')
					{
						int num4 = 3;
						this.uv.Add(new Vector2(this.GetFloat(stringBuilder, ref num4, ref stringBuilder2), this.GetFloat(stringBuilder, ref num4, ref stringBuilder2)));
					}
					else if (stringBuilder[0] == 'v' && stringBuilder[1] == 'n' && stringBuilder[2] == ' ')
					{
						int num5 = 3;
						this.normals.Add(new Vector3(this.GetFloat(stringBuilder, ref num5, ref stringBuilder2), this.GetFloat(stringBuilder, ref num5, ref stringBuilder2), this.GetFloat(stringBuilder, ref num5, ref stringBuilder2)));
					}
					else if (stringBuilder[0] == 'f' && stringBuilder[1] == ' ')
					{
						int num6 = 2;
						int num7 = 1;
						this.intArray.Clear();
						int num8 = 0;
						while (num6 < stringBuilder.Length && char.IsDigit(stringBuilder[num6]))
						{
							this.faceData.Add(new Vector3Int(this.GetInt(stringBuilder, ref num6, ref stringBuilder2), this.GetInt(stringBuilder, ref num6, ref stringBuilder2), this.GetInt(stringBuilder, ref num6, ref stringBuilder2)));
							num7++;
							this.intArray.Add(num2);
							num2++;
						}
						num8 += num7;
						num7 = 1;
						while (num7 + 2 < num8)
						{
							this.triangles.Add(this.intArray[0]);
							this.triangles.Add(this.intArray[num7]);
							this.triangles.Add(this.intArray[num7 + 1]);
							num7++;
						}
					}
				}
			}
		}

		// Token: 0x0600063A RID: 1594 RVA: 0x00094B88 File Offset: 0x00092D88
		private float GetFloat(StringBuilder sb, ref int start, ref StringBuilder sbFloat)
		{
			sbFloat.Remove(0, sbFloat.Length);
			while (start < sb.Length && (char.IsDigit(sb[start]) || sb[start] == '-' || sb[start] == '.'))
			{
				sbFloat.Append(sb[start]);
				start++;
			}
			start++;
			return this.ParseFloat(sbFloat);
		}

		// Token: 0x0600063B RID: 1595 RVA: 0x00094BFC File Offset: 0x00092DFC
		private int GetInt(StringBuilder sb, ref int start, ref StringBuilder sbInt)
		{
			sbInt.Remove(0, sbInt.Length);
			while (start < sb.Length && char.IsDigit(sb[start]))
			{
				sbInt.Append(sb[start]);
				start++;
			}
			start++;
			return this.IntParseFast(sbInt);
		}

		// Token: 0x0600063C RID: 1596 RVA: 0x00094C58 File Offset: 0x00092E58
		private static float[] GenerateLookupTable()
		{
			float[] array = new float[320];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = (float)(i / 33) * Mathf.Pow(10f, (float)(i % 33 + -16));
			}
			return array;
		}

		// Token: 0x0600063D RID: 1597 RVA: 0x00094C9C File Offset: 0x00092E9C
		private float ParseFloat(StringBuilder value)
		{
			float num = 0f;
			bool flag = false;
			int length = value.Length;
			int num2 = value.Length;
			for (int i = length - 1; i >= 0; i--)
			{
				if (value[i] == '.')
				{
					num2 = i;
					break;
				}
			}
			int num3 = 16 + num2;
			for (int j = 0; j < num2; j++)
			{
				if (j != num2 && value[j] != '-')
				{
					num += FastObjImporter.pow10[(int)((value[j] - '0') * '!') + num3 - j - 1];
				}
				else if (value[j] == '-')
				{
					flag = true;
				}
			}
			for (int k = num2 + 1; k < length; k++)
			{
				if (k != num2)
				{
					num += FastObjImporter.pow10[(int)((value[k] - '0') * '!') + num3 - k];
				}
			}
			if (flag)
			{
				num = -num;
			}
			return num;
		}

		// Token: 0x0600063E RID: 1598 RVA: 0x00094D74 File Offset: 0x00092F74
		private int IntParseFast(StringBuilder value)
		{
			int num = 0;
			for (int i = 0; i < value.Length; i++)
			{
				num = 10 * num + (int)(value[i] - '0');
			}
			return num;
		}

		// Token: 0x0600063F RID: 1599 RVA: 0x00004FE3 File Offset: 0x000031E3
		public FastObjImporter()
		{
		}

		// Token: 0x06000640 RID: 1600 RVA: 0x00004FEB File Offset: 0x000031EB
		// Note: this type is marked as 'beforefieldinit'.
		static FastObjImporter()
		{
		}

		// Token: 0x04001359 RID: 4953
		private static FastObjImporter _instance;

		// Token: 0x0400135A RID: 4954
		private List<int> triangles;

		// Token: 0x0400135B RID: 4955
		private List<Vector3> vertices;

		// Token: 0x0400135C RID: 4956
		private List<Vector2> uv;

		// Token: 0x0400135D RID: 4957
		private List<Vector3> normals;

		// Token: 0x0400135E RID: 4958
		private List<Vector3Int> faceData;

		// Token: 0x0400135F RID: 4959
		private List<int> intArray;

		// Token: 0x04001360 RID: 4960
		private const int MIN_POW_10 = -16;

		// Token: 0x04001361 RID: 4961
		private const int MAX_POW_10 = 16;

		// Token: 0x04001362 RID: 4962
		private const int NUM_POWS_10 = 33;

		// Token: 0x04001363 RID: 4963
		private static readonly float[] pow10 = FastObjImporter.GenerateLookupTable();
	}
}
