using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.PostProcessing;
using UnityEngine.UI;


//TODO:Add frying pan sounds


/*

	NOTLAR

	PROPERTIES SEÇENEK 1: -345, 301.5     FONT 48
	EXPLOSIONVISUALSCRIPTE Bİ GÖZ AT DOPOSTSETUPDA HATA VERİNCE SINIRSIZ PATLAMA OLUYOR


*/

namespace Jhrino.MFPLevelEditor
{
	// Token: 0x020000E1 RID: 225
	public class LevelEditorHandler : MonoBehaviour
	{

		public enum MFPGamemode
		{
			NORMAL = 0,
			SKYFALL = 1,
			MOTORCYCLE = 2
		}


		public bool levelInitialized = false;

		public UIWeaponSelectorScript uIWeaponSelector;

		
		public bool tutorialContinuing = false;


		public void LoadModel(GameObject target, string modelname, string textureName = "")
		{
			string mdlfilename = Path.GetFileName(modelname);

			if(File.Exists(modelname))
			{


				MeshFilter MDLFilter =	target.AddComponent<MeshFilter>();;
				MeshRenderer MDLRend =	target.AddComponent<MeshRenderer>();

					Mesh loadedMDL = FastObjImporter.Instance.ImportFile(modelname);
					if(loadedMDL != null)
					{
						loadedMDL.name = mdlfilename;


						MDLFilter.mesh = loadedMDL;
						MDLRend.material = new Material(this.DefaultStandardShader);
						MDLRend.material.mainTexture = MFPEditorUtils.LoadPNG(this.LoadFileFromDataFolder(textureName));
						MFPEditorLogger.Log("Load model complete");
					}
				}
			}



		public void ClearAllPlayerWeapons()
		{

			playerScript.resetWeapons();
			for(int i = 0; i <	playerScript.weaponActive.Length; i++)
			{
				playerScript.weaponActive[i] = false;
			}
			playerScript.weapon = 0;
			playerScript.changeWeapon(0);
			Player.GetComponent<WeaponManager>().attackStance = WeaponManager.MFPAttackStance.FIGHTCLUB;
			playerScript.updateAmmoHUD();
		}

		public void UnlockWeapon(int wepID)
		{
			playerScript.weaponActive[wepID] = true;
			playerScript.ammoTotal[wepID] = 128;
			playerScript.secondaryAmmo[wepID] = 3;

		}

		public void GiveFullAmmo()
		{
			for(int i = 1; i <= 10; i++)
			{
				if(playerScript.weaponActive[i])
				{
					playerScript.ammo[i] = root.ammoFullClip[i];
					playerScript.ammoTotal[i] = root.ammoMax[i];
				}
			}
		}
	
		public void UpdatePlayerLoadout(int weapon, bool isOn)
		{;

			switch(weapon)
			{
				case 1:
					pistol = isOn;
				break;

				case 2:
					dualPistol = isOn;
				break;

				case 3:
					uzi = isOn;
					break;
				case 4:
					dualUzi = isOn;
				break;
				case 5:
					assaultRifle = isOn;
				break;
				case 6:
					shotgun = isOn;
					break;
				case 7:
					shockRifle = isOn;
					break;
				case 8:
					turretGun = isOn;
					break;
				case 9:
					sniper = isOn;
					break; 
				case 10:
					crossbow = isOn;
					break;

			}
		}

		

		public void PreparePlayerLoadout()
		{
			
			if(crossbow)
				UnlockWeapon(10);
			if(sniper)
				UnlockWeapon(9);
			if(turretGun)
				UnlockWeapon(8);
			if(shockRifle)
				UnlockWeapon(7);
			if(shotgun)
				UnlockWeapon(6);
			if(assaultRifle)
				UnlockWeapon(5);
			if(dualUzi)
				UnlockWeapon(4);
			if(uzi)
				UnlockWeapon(3);
			if(dualPistol)
				UnlockWeapon(2);
			if(pistol)
				UnlockWeapon(1);
			
			uIWeaponSelector.prepareUI();
			GiveFullAmmo();
			playerScript.updateAmmoHUD();
			

			
			
		}

		public void ConfigureGeometryProperties(GameObject target, int layer, bool disappears, string texturename)
		{

			target.layer = layer;
			if(disappears)
			{
				target.AddComponent<AudioSource>();
				target.AddComponent<DisappearPlatformScript>();
				target.GetComponent<DisappearPlatformScript>().enabled = false;
			}

			target.GetComponent<MeshRenderer>().material.mainTexture = MFPEditorUtils.LoadPNG(MFPEditorUtils.LoadFileFromDataFolder(texturename));


			string normalmap = texturename;
			normalmap = normalmap.Replace(".png", "");
			normalmap = normalmap + "_normal.png";
			target.GetComponent<MeshRenderer>().material.SetTexture("_BumpMap", MFPEditorUtils.LoadPNG(MFPEditorUtils.LoadFileFromDataFolder(normalmap)));
	
			target.GetComponent<MeshRenderer>().material.mainTexture.name = texturename;
		}


		public void OnInputValueChanged(string inputText, string property)
		{

		}
		public void OnInputValueChanged(InputField field, string inputText, string property, int minVal, int maxVal)
		{
			field.text = MFPEditorUtils.NormalizeInputFieldIntValue(inputText, minVal, maxVal);

			switch(property)
			{
				default:
					MFPEditorLogger.Log("No case exists for property " + property);
					break;
				case "weaponID":
					EditingObject.GetComponent<MFPEnemySpawner>().enemyWeapon = int.Parse(field.text);
					break;
				
				case "intensity":
					EditingObject.GetComponent<Light>().intensity = float.Parse(field.text);
					break;

				case "explosionStrength":
					if(tutorialContinuing)
						{
							if(MFPLevelEditorTutorial.Inst != null)
								if(MFPLevelEditorTutorial.Inst.tutorialState != MFPLevelEditorTutorial.MFPTutorialState.ADJUST_PROPERTIES)
									return;
								else
									MFPLevelEditorTutorial.Inst.OnTaskAccomplished();
						}
					EditingObject.GetComponent<GasCanisterScript>().explosionSize = int.Parse(field.text);
					break;

				case "lightColR":

					if(field.text == "")
						field.text = "0";

					Light editLight1 = EditingObject.GetComponent<Light>();
					Color32 curColorR = (Color32)editLight1.color;
					Color32 newLightColorR = new Color32(byte.Parse(field.text), curColorR.g, curColorR.b, 255);
					EditingObject.GetComponent<Light>().color = newLightColorR;
				break;

				case "lightColG":
					if(field.text == "")
						field.text = "0";
					Light editLight2 = EditingObject.GetComponent<Light>();
					Color32 curColorG = (Color32)editLight2.color;
					Color32 newLightColorG = new Color32(curColorG.g, byte.Parse(field.text), curColorG.b, 255);
					EditingObject.GetComponent<Light>().color = newLightColorG;


					MFPEditorLogger.Log("new green color is: " + EditingObject.GetComponent<Light>().color.g.ToString());
				break;

				case "lightColB":
					if(field.text == "")
						field.text = "0";
					Light editLight3 = EditingObject.GetComponent<Light>();
					Color32 curColorB = (Color32)editLight3.color;
					Color32 newLightColorB = new Color32(curColorB.r, curColorB.g, byte.Parse(field.text), 255);
					EditingObject.GetComponent<Light>().color = newLightColorB;
				break;
				
			}
		}

		public void OnToggleChanged(Toggle toggle, string property, GameObject target)
		{
			switch(property)
			{
				default:
					return;
				case "disappears":
					if(toggle.isOn)
					{
						if(!target.GetComponent<DisappearPlatformScript>());
						{
							target.AddComponent<AudioSource>();
							target.AddComponent<DisappearPlatformScript>().enabled = false;

						}
					}
					else
						if(target.GetComponent<DisappearPlatformScript>())
						{

							Destroy(target.GetComponent<AudioSource>());
							Destroy(target.GetComponent<DisappearPlatformScript>());
						}
				break;

				case "shoot_through":
					if(toggle.isOn)
						{
							target.layer = 15;
							MFPEditorLogger.Log("Shoot-through");
						}
					else
						{
							target.layer = 8;
							MFPEditorLogger.Log("Solid");
						}
				
				break;

			}
			
		}


		public void PropertiesSetup(string objtype)
		{

			if(EditingObject == null)
				return;


			foreach(GameObject element in propertyElements)
			{
				Destroy(element);
			}

			MFPEditorLogger.Log("we opened with type " + objtype);

	
			switch(objtype)
			{
				default:
					MFPEditorLogger.Log("Object type " + objtype + " does not exist!");
					break;

				case "floor":
					
					Text disappearText = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-345, 301.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, "Disappears:", "TestPrroperties", 48);

					Toggle disappearCheck = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(-100, 301.5f), new Vector2(45,45), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PropertiesPanel, "OptionTest", "", "");

					if(EditingObject.GetComponent<DisappearPlatformScript>())
						disappearCheck.isOn = true;
					else
						disappearCheck.isOn = false;
					
					disappearCheck.onValueChanged.AddListener(delegate
					{
						OnToggleChanged(disappearCheck, "disappears", EditingObject);
					});



					Text shootThroughText = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-345, 226.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, "Shoot Through:", "ShootThrough", 48);

					Toggle sthroughCheck = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(-100, 226.5f), new Vector2(45,45), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PropertiesPanel, "OptionTest", "", "");

					if(EditingObject.layer == 15)
						sthroughCheck.isOn = true;
					else
						sthroughCheck.isOn = false;
					
					sthroughCheck.onValueChanged.AddListener(delegate
					{
						OnToggleChanged(sthroughCheck, "shoot_through", EditingObject);
					});


					propertyElements.Add(disappearText.gameObject);
					propertyElements.Add(disappearCheck.gameObject);
					propertyElements.Add(shootThroughText.gameObject);
					propertyElements.Add(sthroughCheck.gameObject);


					MFPEditorLogger.Log("Properties initilizaiton complete");
				break;

				case "GasCanister":
					Text GasCanMagnDesc = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-345, 301.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, "Explosion Strength:", "GasCanMagnDesc", 48);

					Text GasCanMagnText = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-45, 301.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, EditingObject.GetComponent<GasCanisterScript>().explosionSize.ToString(), "GasCanMagn", 48);

					InputField gasCanMagnInput = MFPEditorUtils.ReturnCreateNewInputField(MFPEditorUtils.UIAnchor.middle, new Vector2(-75, 301.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PropertiesPanel, "MagnTextF", "", GasCanMagnText, true, InputField.CharacterValidation.Integer);

					gasCanMagnInput.onValueChanged.AddListener(delegate
					{
						OnInputValueChanged(gasCanMagnInput, gasCanMagnInput.text, "explosionStrength", 1, 999);
					});

					propertyElements.Add(GasCanMagnDesc.gameObject);
					propertyElements.Add(GasCanMagnText.gameObject);
				break;
				
				case "EnemySpawner":
					Text WeaponIDDesc = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-345, 301.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, "Weapon ID:", "WeaponIDDesc", 48);

					Text WeaponIDText = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-75, 301.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, EditingObject.GetComponent<MFPEnemySpawner>().enemyWeapon.ToString(), "WeaponID", 48);

					InputField testInput = MFPEditorUtils.ReturnCreateNewInputField(MFPEditorUtils.UIAnchor.middle, new Vector2(-75, 301.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PropertiesPanel, "TestField", "", WeaponIDText, true, InputField.CharacterValidation.Integer);

					testInput.onValueChanged.AddListener(delegate
					{
						OnInputValueChanged(testInput, testInput.text, "weaponID", 1, 9);
					});

					propertyElements.Add(testInput.gameObject);
					propertyElements.Add(WeaponIDDesc.gameObject);
					propertyElements.Add(WeaponIDText.gameObject);
				break;


				case "PointLight":
					Text IntensityDesc = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-345, 301.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, "Intensity:", "IntensityDesc", 48);

					Text IntensityText = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-75, 301.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, EditingObject.GetComponent<Light>().intensity.ToString(), "Intensity", 48);

					InputField intensityInput = MFPEditorUtils.ReturnCreateNewInputField(MFPEditorUtils.UIAnchor.middle, new Vector2(-75, 301.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PropertiesPanel, "IntensityField", "", IntensityText, true, InputField.CharacterValidation.Decimal);

					intensityInput.onValueChanged.AddListener(delegate
					{
						OnInputValueChanged(intensityInput, intensityInput.text, "intensity", 0, 50);
					});


					Color32 lightCol32 = (Color32)EditingObject.GetComponent<Light>().color;

					Text colText = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-345, 120.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, "Color:", "colText", 48);

					Text colRText = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-200, 140.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, lightCol32.r.ToString(), "colRText", 40);

					InputField colRInput = MFPEditorUtils.ReturnCreateNewInputField(MFPEditorUtils.UIAnchor.middle, new Vector2(-200, 140.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PropertiesPanel, "colRField", "", colRText, true, InputField.CharacterValidation.Decimal);


					Text colGText = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-200, 100.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, lightCol32.g.ToString(), "colGText", 40);

					InputField colGInput = MFPEditorUtils.ReturnCreateNewInputField(MFPEditorUtils.UIAnchor.middle, new Vector2(-200, 100.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PropertiesPanel, "colGField", "", colGText, true, InputField.CharacterValidation.Decimal);

					Text colBText = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleLeft, new Vector2(-200, 60.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(0,0,0, 255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PropertiesPanel, lightCol32.b.ToString(), "colBText", 40);

					InputField colBInput = MFPEditorUtils.ReturnCreateNewInputField(MFPEditorUtils.UIAnchor.middle, new Vector2(-200, 60.5f), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PropertiesPanel, "colBField", "", colBText, true, InputField.CharacterValidation.Decimal);


					colRInput.onValueChanged.AddListener(delegate
					{
						OnInputValueChanged(colRInput, colRInput.text, "lightColR", 0, 255);
					});

					colGInput.onValueChanged.AddListener(delegate
					{
						OnInputValueChanged(colGInput, colGInput.text, "lightColG", 0, 255);
					});

					colBInput.onValueChanged.AddListener(delegate
					{
						OnInputValueChanged(colBInput, colBInput.text, "lightColB", 0, 255);
					});


					propertyElements.Add(intensityInput.gameObject);
					propertyElements.Add(IntensityDesc.gameObject);
					propertyElements.Add(IntensityText.gameObject);

					propertyElements.Add(colText.gameObject);

					propertyElements.Add(colRText.gameObject);
					propertyElements.Add(colGText.gameObject);
					propertyElements.Add(colBText.gameObject);

					propertyElements.Add(colRInput.gameObject);
					propertyElements.Add(colGInput.gameObject);
					propertyElements.Add(colBInput.gameObject);

			
				break;
				
			}
		}


		///
		/// RELEASE YAPARKEN KAPA BUNU
		//
		//

		public bool isDebug = false;
		public Text coordinateDebugger;


		public void PostPlayModeCleanup()
		{

			foreach(Projector blood in GameObject.FindObjectsOfType<Projector>())
			{
				Destroy(blood.gameObject);
			}

			foreach(WeaponPickupScript wep in GameObject.FindObjectsOfType<WeaponPickupScript>())
			{
				Destroy(wep.gameObject);
			}


			foreach(GameObject gib in GameObject.FindGameObjectsWithTag("Gib"))
			{
				Destroy(gib);
			}

			foreach(GameObject Canister in GasCanisters)
			{
				Canister.SetActive(true);
			}
			foreach(GameObject LVCanister in LevelGasCanisters)
			{
				Destroy(LVCanister);
			}

			foreach(GameObject pan in FryingPans)
			{
				pan.SetActive(true);
			}
			foreach(GameObject pan in LevelFryingPans)
			{
				Destroy(pan);
			}

			foreach(GameObject skateboard in Skateboards)
			{
				skateboard.SetActive(true);
			}

			foreach(GameObject skateboard in LevelSkateboards)
			{
				Destroy(skateboard);
			}

			foreach(DisappearPlatformScript platformScript in GameObject.FindObjectsOfType<DisappearPlatformScript>())
			{
				platformScript.ResetPlatform();
				platformScript.enabled = false;
			}

			foreach(TableFlipScript tableFlip in GameObject.FindObjectsOfType<TableFlipScript>())
			{
				tableFlip.ResetTable();
			}




		}

		// Token: 0x06000615 RID: 1557
		private void Update()
		{
			//
			//
			//
			if(isDebug)
			{
				string mouseCoords = Input.mousePosition.ToString().Replace(".0", "");
				coordinateDebugger.text = mouseCoords.Split(',')[0] +  ", " + mouseCoords.Split(',')[1] + ")";
			}
			//


			if(Input.GetKeyDown(KeyCode.L))
				UnlockWeapon(3);

			if(Gamemode == MFPGamemode.SKYFALL && PlayMod && levelInitialized)
			{
				if(root.nrOfEnemiesTotal == root.nrOfEnemiesKilled)
					GameObject.FindObjectOfType<LevelChangerScript>().doTheThing();
			}

			if (Input.GetKeyDown(KeyCode.P))
			{
				this.PlayMode();
				this.PrototypeSave();
			}
			if (Input.GetKeyDown(KeyCode.N) && !this.PlayMod)
			{
				this.PrototypeLoad();
			}
			if (Input.GetKeyDown(KeyCode.M) && !this.PlayMod)
			{
				this.PrototypeSave();
			}
			//delete this sometime
			if(this.Editing && Input.GetKeyDown(KeyCode.X))
				ExitEditMode();

			if (this.PlayMod)
			{
				LevelEditorHandler.levelTimer += Time.timeScale;
				if ((double)playerScript.health < 0.02)
				{
					LevelEditorHandler.PlayerisDeadAndForceAutoLoad = true;
				}
			}
			if (!this.PlayMod)
			{
				if (this.Editing)
				{
					this.EditingMode();
				}

				/* şuanlık buglu
				if(Input.GetKey(KeyCode.LeftControl) && Input.GetKey(KeyCode.V))
				{
					if(CopiedObject != null)
					{
						ExitEditMode();
						GameObject copiedObject = Instantiate(CopiedObject);
						foreach(LevelEditorAxis extraAxis in copiedObject.GetComponentsInChildren<LevelEditorAxis>())
						{
							Destroy(extraAxis.gameObject);
						}
						if(copiedObject.name.Contains("FryingPan"))
							FryingPans.Add(copiedObject);
						if(copiedObject.name.Contains("GasCanister"))
							GasCanisters.Add(copiedObject);
						if(copiedObject.name.Contains("Floor"))
							GeometryFloorLump.Add(copiedObject);
						if(copiedObject.name.Contains("Wall"))
							GeometryWallLump.Add(copiedObject);
						EnterEditMode(copiedObject);
					}
				}
				*/

				RaycastHit raycastHit;
				if (Input.GetMouseButtonDown(0) && !this.Editing && !SnapToBuild && !this.adjustingSettings && Physics.Raycast(this.EditorCamera.ScreenPointToRay(Input.mousePosition), out raycastHit))
				{
					if(raycastHit.transform.gameObject != null)
					{
					MFPEditorLogger.Log("Entering edit mode to object " + raycastHit.transform.name);
					this.EnterEditMode(raycastHit.transform.gameObject);
					}
				}
				if (Input.GetKeyDown(KeyCode.T) && !this.Editing)
				{

					if(!SnapToBuild)
					{
						if(tutorialContinuing)
						{
							if(MFPLevelEditorTutorial.Inst != null)
								if(MFPLevelEditorTutorial.Inst.tutorialState != MFPLevelEditorTutorial.MFPTutorialState.ENTER_SNAPMODE)
									return;
								else
									MFPLevelEditorTutorial.Inst.OnTaskAccomplished();
						}

						SnapToBuild = true;
						if(Editing)
							ExitEditMode();
						ToggleSnapping(true);
					}
					else
					{			

						SnapToBuild = false;
						ToggleSnapping(false);

					}

				}
				if (Input.GetKeyDown(KeyCode.K) && !this.Editing)
				{
					GameObject gameObject2 = GameObject.CreatePrimitive(PrimitiveType.Sphere);
					gameObject2.name = "EnemySpawner";
					UnityEngine.Object.Destroy(gameObject2.GetComponent<SphereCollider>());
					gameObject2.AddComponent<CapsuleCollider>();
					gameObject2.layer = 8;
					gameObject2.transform.localScale = new Vector3(gameObject2.transform.localScale.x, 4f, gameObject2.transform.localScale.x);
					gameObject2.transform.position = new Vector3(this.EditorCamera.transform.position.x, this.EditorCamera.transform.position.y, -0.1f);
					gameObject2.GetComponent<MeshRenderer>().material.color = new Color(1f, 0f, 0f);
					gameObject2.AddComponent<MFPEnemySpawner>();
					this.EnemySpawnpoints.Add(gameObject2.transform);
					this.EnterEditMode(gameObject2);
				}


				if(!PlayMod && SnapToBuild && !Editing)
				{
					RaycastHit hit;
					Ray ray = EditorCamera.GetComponent<Camera>().ScreenPointToRay(Input.mousePosition);

					if(Physics.Raycast(ray, out hit))
					{
						if(hit.transform.GetComponent<snaphelper>());
						{
							SnapTarget = hit.transform.gameObject;
							
						
					}

					

						if(Input.GetMouseButtonDown(0))
						{
							snaphelper snappy = SnapTarget.GetComponent<snaphelper>();

						if(snappy != null && SnapTarget != null && !Editing)
						{
							if(!snappy.isWallNode)
							{
								GameObject newFloor = Instantiate(floor_Wood);
								newFloor.name = "Wooden Floor";
								newFloor.SetActive(true);

								 if(snappy.snapaxis == snaphelper.Axis.NegativeX)
								 newFloor.transform.position = new Vector3(SnapTarget.transform.parent.position.x - 2, SnapTarget.transform.parent.position.y, SnapTarget.transform.parent.position.z);
								 else
								newFloor.transform.position = new Vector3(SnapTarget.transform.parent.position.x + 2, SnapTarget.transform.parent.position.y, SnapTarget.transform.parent.position.z);	

							if(tutorialContinuing && MFPLevelEditorTutorial.Inst != null && MFPLevelEditorTutorial.Inst.tutorialState == MFPLevelEditorTutorial.MFPTutorialState.PLACE_OBJECT)
									MFPLevelEditorTutorial.Inst.OnTaskAccomplished();

								foreach(GameObject @object in GeometryWallLump)
								{
									if(newFloor.transform.position == @object.transform.position)
									{
										Destroy(newFloor);
										return;
									}
								}


								 MFPEditorLogger.Log("new floor at " + newFloor.transform.position.ToString());
							 GeometryFloorLump.Add(newFloor);
							
							}
							if(SnapTarget.GetComponent<snaphelper>().isWallNode)
							{


								GameObject newWall = Instantiate(this.wall_Brick);
								newWall.transform.name = "Brick Wall #" + GeometryWallLump.Count().ToString();
								newWall.SetActive(true);
							    newWall.transform.position = new Vector3(SnapTarget.transform.position.x, SnapTarget.transform.position.y, SnapTarget.transform.position.z);
								 newWall.transform.eulerAngles = new Vector3(0, -90, 0);

								foreach(GameObject @object in GeometryWallLump)
								{
									if(newWall.transform.position == @object.transform.position)
									{
										Destroy(newWall);
										return;
									}
								}


								SnapTarget.GetComponent<snaphelper>().SnappedObject = newWall;


									GeometryWallLump.Add(newWall);
									MFPEditorLogger.Log(newWall.name + " added");

								
							}
							
							SnapTarget = null;
						}
						}
					}
				}



			}
		}

		// Token: 0x06000616 RID: 1558
		public LevelEditorHandler()
		{
		}

		// Token: 0x06000617 RID: 1559
		private void Start()
		{
			if(Inst == null)
				Inst = this;

			this.LoadEditorAssets();

			//tutorial şuan commentli kesinlikle aç
			//
			//
			//
			//
			//
			//new GameObject().AddComponent<MFPLevelEditorTutorial>();


			tutorialContinuing = true;

			if (!Directory.Exists(MFPEditorUtils.LoadFileFromDataFolder("default")))
			{
				Directory.CreateDirectory(MFPEditorUtils.LoadFileFromDataFolder("Levels/default"));
			}
			this.root = GameObject.Find("Root").GetComponent<RootScript>();
			
			UnityEngine.Object.FindObjectOfType<OptimizerScript>().enabled = false;
			this.root.nrOfEnemiesTotal = 0;
			root.stopSpeechBubble();
			root.dontAllowActionMode = true;
			this.HUD = GameObject.Find("HUD/Canvas");

			uIWeaponSelector = GameObject.Find("HUD/Canvas/WeaponSelector").GetComponent<UIWeaponSelectorScript>();

			this.Player = GameObject.Find("Player");
			Player.AddComponent<WeaponManager>();
			playerScript = Player.GetComponent<PlayerScript>();
			ClearAllPlayerWeapons();
			this.Camera = GameObject.Find("Main Camera");
			this.BackgroundCamera = GameObject.Find("HorizonBackground_Theme_1/Background Camera");
			BackgroundCamera.transform.parent = null;
		//	Destroy(GameObject.Find("HorizonBackground_Theme_1"));

			Slippery.dynamicFriction = 0;
			Slippery.staticFriction = 0;
			Slippery.bounciness = 0;
			Slippery.bounceCombine = PhysicMaterialCombine.Average;
			Slippery.frictionCombine = PhysicMaterialCombine.Minimum;

			SkateboardTop.dynamicFriction = 0.2f;
			SkateboardTop.staticFriction = 0.2f;
			SkateboardTop.bounciness = 0.3f;
			SkateboardTop.bounceCombine = PhysicMaterialCombine.Average;
			SkateboardTop.frictionCombine = PhysicMaterialCombine.Average;

			GameObject LevelLight = new GameObject();	
			LevelLight.name = "Level Lighting";
			LevelLight.transform.eulerAngles = new Vector3(50,-30,0);

			Light SceneLight = LevelLight.AddComponent<Light>();
			SceneLight.type = LightType.Directional;
			SceneLight.renderMode = LightRenderMode.ForcePixel;
			SceneLight.shadows = LightShadows.None;
			SceneLight.color = new Color32(255,244, 214, 255);
			SceneLight.cullingMask = 1 << 8 | 1 << 14 | 1 << 15;

			SkyColor = Camera.GetComponent<Camera>().backgroundColor;

			this.Player.SetActive(false);
			this.Camera.SetActive(false);
			ToggleHUD(false);
			/* OLD BULDING 
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);
			gameObject.layer = 8;
			gameObject.transform.position = new Vector3(0f, -1f, 0f);
			gameObject.transform.localScale = new Vector3(5f, 1f, 7f);
			gameObject.GetComponent<MeshRenderer>().material.color = new Color32(byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MaxValue);
			gameObject.AddComponent<TextureTilingController>();
			gameObject.GetComponent<MeshRenderer>().material.mainTexture = this.DefaultTexture;
			gameObject.GetComponent<MeshRenderer>().material.mainTexture.name = "EditorAssets/dev_measuregeneric01b.png";
			gameObject.name = "Brush #1";
			this.BrushLump.Add(gameObject);
			*/

			Material FloorMaterial = new Material(Shader.Find("Standard"));


			FloorMaterial.mainTexture = MFPEditorUtils.LoadPNG(LoadFileFromDataFolder("EditorAssets/BaseGame/textures/floor_wood_indoors.png"));
			FloorMaterial.mainTexture.name = "EditorAssets/BaseGame/textures/floor_wood_indoors.png";
			FloorMaterial.SetTexture("_BumpMap", MFPEditorUtils.LoadPNG(LoadFileFromDataFolder("EditorAssets/BaseGame/Textures/floor_wood_indoors_" + "normal.png")));

			GameObject gameObject = new GameObject();
			gameObject.name = "Wood Floor";
			gameObject.layer = 8;
			MeshRenderer meshrend = gameObject.AddComponent<MeshRenderer>();
			MeshCollider meshColl = gameObject.AddComponent<MeshCollider>();
			MeshFilter meshFilter = gameObject.AddComponent<MeshFilter>();

			meshFilter.mesh = FastObjImporter.Instance.ImportFile(MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/BaseGame/floor_wood.obj"));
			meshColl.sharedMesh = meshFilter.mesh;
			meshrend.material = FloorMaterial;

			GameObject snapBuildLeft = new GameObject();
			snapBuildLeft.name = "SnapBuildLeft";
			snapBuildLeft.transform.parent = gameObject.transform;
			snapBuildLeft.AddComponent<BoxCollider>();
			snapBuildLeft.transform.localScale = new Vector3(0.1963f, 0.73813f, 10.98067f);
			snapBuildLeft.transform.localPosition = new Vector3(-1.09f, -0.1309f, 1.1903f);

			snaphelper snaphelping = snapBuildLeft.AddComponent<snaphelper>();
			snaphelping.snapaxis = snaphelper.Axis.NegativeX;

			GameObject snapBuildRight = new GameObject();
			snapBuildRight.name = "SnapBuildRight";
			snapBuildRight.transform.parent = gameObject.transform;
			snapBuildRight.AddComponent<BoxCollider>();
			snapBuildRight.transform.localScale = new Vector3(0.1963f, 0.73813f, 10.98067f);
			snapBuildRight.transform.localPosition = new Vector3(1.09f, -0.1309f, 1.1903f);

			snaphelper snaphelpingR = snapBuildRight.AddComponent<snaphelper>();
			snaphelpingR.snapaxis = snaphelper.Axis.PositiveX;


			 GameObject SnapBuildMiddle = new GameObject();
			 SnapBuildMiddle.name = "SnapBuildMiddle";
			 SnapBuildMiddle.transform.parent = gameObject.transform;
			 SnapBuildMiddle.AddComponent<BoxCollider>();
			 SnapBuildMiddle.transform.position = new Vector3(0, 2.34f, 6.735f);
			SnapBuildMiddle.transform.localScale = new Vector3(2,5,0.1f);
			 SnapBuildMiddle.AddComponent<snaphelper>().isWallNode = true;

			Destroy(gameObject.GetComponent<snaphelper>());

			GameObject floorwood_asset = Instantiate(gameObject);
			floorwood_asset.SetActive(false);

			floor_Wood = floorwood_asset;

			GeometryFloorLump.Add(gameObject);
			MFPEditorLogger.Log("Wood floor spawned");

			GameObject wall_Brick = new GameObject();
			wall_Brick.name = "Brick Wall";

			wall_Brick.layer = 8;
			MeshRenderer meshrend_brickwall = wall_Brick.AddComponent<MeshRenderer>();
			MeshCollider meshColl_brickwall = wall_Brick.AddComponent<MeshCollider>();
			MeshFilter meshFilter_brickwall = wall_Brick.AddComponent<MeshFilter>();

			meshFilter_brickwall.mesh = FastObjImporter.Instance.ImportFile(MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/BaseGame/wall_brick.obj"));
			meshColl_brickwall.sharedMesh = meshFilter_brickwall.mesh;
			meshrend_brickwall.material = new Material(FloorMaterial);

			meshrend_brickwall.material.mainTexture = MFPEditorUtils.LoadPNG(LoadFileFromDataFolder("EditorAssets/BaseGame/textures/wall_textures_1.png"));
			meshrend_brickwall.material.mainTexture.name = "EditorAssets/BaseGame/textures/wall_textures_1.png";
			meshrend_brickwall.material.SetTexture("_BumpMap", MFPEditorUtils.LoadPNG(LoadFileFromDataFolder("EditorAssets/BaseGame/Textures/wall_textures_1" + "normal" + ".png")));

			MFPEditorLogger.Log("Brick meshes are dealt with");

			GameObject brickwall_SnapBuildLeft = new GameObject();

			MeshFilter meshFilter_SnapBuildLeft = brickwall_SnapBuildLeft.AddComponent<MeshFilter>();
			meshFilter_SnapBuildLeft.mesh = meshFilter_brickwall.mesh;
			MFPEditorLogger.Log("SnapBuildLeft meshes are done");
			brickwall_SnapBuildLeft.AddComponent<MeshRenderer>().material = StandardShaderUtils.ChangeRenderMode(wall_Brick.GetComponent<MeshRenderer>().material, StandardShaderUtils.BlendMode.Transparent);
			brickwall_SnapBuildLeft.GetComponent<MeshRenderer>().material.color = new Color(0,1,0, 0.4f);
			brickwall_SnapBuildLeft.GetComponent<MeshRenderer>().enabled = false;
			MFPEditorLogger.Log("SnapBuildLeft renderer is done");

			brickwall_SnapBuildLeft.transform.parent = wall_Brick.transform;
			brickwall_SnapBuildLeft.AddComponent<BoxCollider>();
			brickwall_SnapBuildLeft.GetComponent<BoxCollider>().size = new Vector3(0.1f, 5, 2);
			brickwall_SnapBuildLeft.transform.position = new Vector3(0,0, -2);
			
			brickwall_SnapBuildLeft.AddComponent<snaphelper>();
			brickwall_SnapBuildLeft.GetComponent<snaphelper>().isWallNode = true;

			MFPEditorLogger.Log("SnapBuildLeft is done");

			GameObject brickwall_SnapBuildRight = new GameObject();

			MeshFilter meshFilter_SnapBuildRight = brickwall_SnapBuildRight.AddComponent<MeshFilter>();
			meshFilter_SnapBuildRight.mesh = meshFilter_brickwall.mesh;
			MFPEditorLogger.Log("SnapBuildRight mesh is done");
			brickwall_SnapBuildRight.AddComponent<MeshRenderer>().enabled = false;
			brickwall_SnapBuildRight.GetComponent<MeshRenderer>().material = brickwall_SnapBuildLeft.GetComponent<MeshRenderer>().material;
			MFPEditorLogger.Log("SnapBuildRight renderer is done");

			brickwall_SnapBuildRight.transform.parent = wall_Brick.transform;
			brickwall_SnapBuildRight.AddComponent<BoxCollider>();
			brickwall_SnapBuildRight.GetComponent<BoxCollider>().size = new Vector3(0.1f, 5, 2);
			brickwall_SnapBuildRight.transform.position = new Vector3(0,0, 2);
			
			brickwall_SnapBuildRight.AddComponent<snaphelper>();
			brickwall_SnapBuildRight.GetComponent<snaphelper>().isWallNode = true;
			MFPEditorLogger.Log("SnapBuildRight is done");


			
			GameObject brickwall_SnapBuildTop = new GameObject();
			
			MeshFilter meshFilter_SnapBuildTop = brickwall_SnapBuildTop.AddComponent<MeshFilter>();
			meshFilter_SnapBuildTop.mesh = meshFilter_brickwall.mesh;
			MFPEditorLogger.Log("SnapBuildTop mesh is done");
			brickwall_SnapBuildTop.AddComponent<MeshRenderer>();
			brickwall_SnapBuildTop.GetComponent<MeshRenderer>().material = brickwall_SnapBuildLeft.GetComponent<MeshRenderer>().material;
			brickwall_SnapBuildTop.GetComponent<MeshRenderer>().enabled = false;
			MFPEditorLogger.Log("SnapBuildTop renderer is done");

			brickwall_SnapBuildTop.transform.parent = wall_Brick.transform;
			brickwall_SnapBuildTop.AddComponent<BoxCollider>();
			brickwall_SnapBuildTop.GetComponent<BoxCollider>().size = new Vector3(0.1f, 5, 2);
			brickwall_SnapBuildTop.transform.position = new Vector3(0,5,0);
			
			brickwall_SnapBuildTop.AddComponent<snaphelper>();
			brickwall_SnapBuildTop.GetComponent<snaphelper>().isWallNode = true;

			MFPEditorLogger.Log("SnapBuildTop is done");

			GameObject brickwall_SnapBuildBottom = new GameObject();


			MeshFilter meshFilter_SnapBuildBottom = brickwall_SnapBuildBottom.AddComponent<MeshFilter>();
			meshFilter_SnapBuildBottom.mesh = meshFilter_brickwall.mesh;
			brickwall_SnapBuildBottom.AddComponent<MeshRenderer>();
			brickwall_SnapBuildBottom.GetComponent<MeshRenderer>().material = brickwall_SnapBuildLeft.GetComponent<MeshRenderer>().material;
			brickwall_SnapBuildBottom.GetComponent<MeshRenderer>().enabled = false;

			brickwall_SnapBuildBottom.transform.parent = wall_Brick.transform;
			brickwall_SnapBuildBottom.AddComponent<BoxCollider>();
			brickwall_SnapBuildBottom.transform.position = new Vector3(0,-5,0);
			
			brickwall_SnapBuildBottom.AddComponent<snaphelper>();
			brickwall_SnapBuildBottom.GetComponent<snaphelper>().isWallNode = true;

			brickwall_SnapBuildLeft.name = "BrickWall_SnapBuildLeft";
			brickwall_SnapBuildTop.name = "BrickWall_SnapBuildTop";
			brickwall_SnapBuildBottom.name = "BrickWall_SnapBuildBottom";
			brickwall_SnapBuildRight.name = "BrickWall_SnapBuildRight";

			this.wall_Brick = Instantiate(wall_Brick);
			Destroy(wall_Brick);
			this.wall_Brick.SetActive(false);

			
			
			MFPEditorLogger.Log("Snappies are done");



			

			GameObject gameObject2 = new GameObject();
			gameObject2.name = "EditorCamera";
			this.EditorCamera = gameObject2.AddComponent<Camera>();
			this.EditorCamera.gameObject.AddComponent<PostProcessingBehaviour>();
			this.EditorCamera.gameObject.GetComponent<PostProcessingBehaviour>().profile = this.Camera.GetComponent<PostProcessingBehaviour>().profile;
			this.EditorCamera.depth = -1f;
			this.EditorCamera.clearFlags = CameraClearFlags.Depth;
			this.EditorCamera.transform.position = new Vector3(0f, 0f, -3f);
			GameObject gameObject3 = new GameObject();
			gameObject3.transform.position = new Vector3(0f, 0f, -15f);
			CameraMovement cameraMovement = gameObject3.AddComponent<CameraMovement>();
			cameraMovement.normalSpeed = 5f;
			cameraMovement.runSpeed = 5f;
			cameraMovement.doMove = true;
			cameraMovement.crouch = false;
			cameraMovement.cam = gameObject2.transform;
			gameObject2.transform.parent = gameObject3.transform;
			this.SpawnEditorHud();
			LevelEditorHandler.Inst = this;
			GameObject gameObject4 = new GameObject();
			LoadModel(gameObject4, MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/BaseGame/player_model_editorgizmo.obj"), "EditorAssets/BaseGame/textures/player_character.png");
			UnityEngine.Object.Destroy(gameObject4.GetComponent<SphereCollider>());
			gameObject4.AddComponent<CapsuleCollider>();
			gameObject4.name = "PlayerSpawn";
		//	gameObject4.transform.rotation = new Quaternion(gameObject4.transform.rotation.x, 0, gameObject4.transform.rotation.z, gameObject4.transform.rotation.w);
			GameObject gameObject5 = GameObject.CreatePrimitive(PrimitiveType.Cube);
			gameObject5.transform.position = new Vector3(5f, 0f, 0f);
			gameObject5.transform.localScale = new Vector3(1f, 1f, 4f);
			gameObject5.name = "MFPEditor_End_Level";
			gameObject5.AddComponent<LevelChangerScript>();
			gameObject5.GetComponent<MeshRenderer>().material.color = Color.green;
			this.FinishLevelTrigger = gameObject5;
			this.PlayerSpawn = gameObject4.transform;
			this.PlayerSpawn.transform.position = new Vector3(0f, 1f, 0f);
			this.PlayMod = false;
			List<string> list = new List<string>();
			foreach (Transform transform in UnityEngine.Object.FindObjectsOfType<Transform>())
			{
				list.Add(transform.name);
			}
			if (LevelEditorHandler.PlayerisDeadAndForceAutoLoad)
			{
				this.PrototypeLoad();
				LevelEditorHandler.PlayerisDeadAndForceAutoLoad = false;
			}
		}

		// Token: 0x06000618 RID: 1560
		public void ChangeCameraState(LevelEditorHandler.CameraMode state, bool editorCamera)
		{
			if (state != LevelEditorHandler.CameraMode.Disabled)
			{
				if (state != LevelEditorHandler.CameraMode.Enabled)
				{
					return;
				}
				if (!this.EditorCamera)
				{
					this.Camera.GetComponent<Camera>().enabled = true;
					return;
				}
				this.EditorCamera.enabled = true;
				return;
			}
			else
			{
				if (!this.EditorCamera)
				{
					this.Camera.GetComponent<Camera>().enabled = false;
					return;
				}
				this.EditorCamera.enabled = true;
				return;
			}
		}

		// Token: 0x06000619 RID: 1561
		public void SpawnEditorHud()
		{



			GameObject gameObject = new GameObject();
			gameObject.layer = 5;
			gameObject.name = "Canvus";
			RectTransform rectTransform = gameObject.AddComponent<RectTransform>();
			rectTransform.anchorMin = new Vector2(0.5f, 0f);
			rectTransform.anchorMax = new Vector2(0.5f, 0f);
			Canvas canvas = gameObject.AddComponent<Canvas>();
			canvas.renderMode = RenderMode.ScreenSpaceOverlay;
			canvas.pixelPerfect = false;
			canvas.targetDisplay = 0;
			canvas.additionalShaderChannels = AdditionalCanvasShaderChannels.None;
			CanvasScaler canvasScaler = gameObject.AddComponent<CanvasScaler>();
			canvasScaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
			canvasScaler.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;
			canvasScaler.referenceResolution = new Vector2(1920f, 1080f);
			canvasScaler.scaleFactor = 0.5f;
			canvasScaler.referencePixelsPerUnit = 100f;
			gameObject.AddComponent<GraphicRaycaster>().ignoreReversedGraphics = true;


			//
			//DEBUG

			if(isDebug)
				coordinateDebugger = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.bottomMiddle, TextAnchor.MiddleCenter, new Vector2(0,200), new Vector2(160, 30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color(100,0,255,255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, gameObject, "coordinate", "CoordinateDEbugger", 32);

			//

			this.DebugObject = MFPEditorUtils.ReturnCreateNewText(MFPEditorUtils.UIAnchor.bottomMiddle, TextAnchor.MiddleCenter, new Vector2(-45.6f, 83f),new Vector2(472.9f, 100), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), Arial, new Color32(255,255,255,255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, gameObject, "Error Loading", "testing", 68);


			GameObject gameObject2 = new GameObject();
			gameObject2.name = "CoordinateField";
			gameObject2.AddComponent<RectTransform>();
			gameObject2.transform.parent = gameObject.transform;
			gameObject2.layer = 5;
			gameObject2.AddComponent<RectTransform>();
			gameObject2.GetComponent<RectTransform>().pivot = new Vector2(0.5f, 0.5f);
			gameObject2.GetComponent<RectTransform>().anchorMin = new Vector2(0.5f, 0f);
			gameObject2.GetComponent<RectTransform>().anchorMax = new Vector2(0.5f, 0f);
			gameObject2.GetComponent<RectTransform>().anchoredPosition = new Vector2(-20f, 173.8f);
			//Image image = gameObject2.AddComponent<Image>();
			//image.sprite = (Resources.GetBuiltinResource(typeof(Sprite), "InputFieldBackground") as Sprite);


			//image.raycastTarget = true;
			
			
			InputField inputField = gameObject2.AddComponent<InputField>();
			this.CoordinateField = inputField;
			inputField.interactable = true;
			inputField.transition = Selectable.Transition.ColorTint;
			inputField.textComponent = this.DebugObject;
			inputField.contentType = InputField.ContentType.Standard;
			inputField.lineType = InputField.LineType.SingleLine;
			inputField.caretBlinkRate = 0.85f;
			inputField.caretWidth = 1;
			inputField.shouldHideMobileInput = true;
			inputField.readOnly = false;
			

			//InputField inputField = MFPEditorUtils.ReturnCreateNewInputField(MFPEditorUtils.UIAnchor.topLeft, new Vector2(0,0), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), gameObject, "CoordinateField", "", this.DebugObject);

			//CoordinateField = inputField;

			Button exitedit = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.bottomMiddle, new Vector2(-20, 10), new Vector2(160,30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), inputField.gameObject, "ExitEditModeButton", "");


			exitedit.onClick.AddListener(delegate()
			{
				ExitEditMode();
			});



			gameObject2.transform.parent = gameObject.transform;
			this.DebugObject.transform.parent = gameObject2.transform;
			inputField.gameObject.SetActive(false);

			Button positionButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.topRight, new Vector2(-128f, -122f), new Vector2(100,100), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), gameObject, "PositionButton", "EditorAssets/icons/ico_position.png");

			 propertiesButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.topLeft, new Vector2(128,-100.9f), new Vector2(100,100), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), gameObject, "PropertiesButton", "EditorAssets/icons/ico_properties.png");

			propertiesButton.onClick.AddListener(delegate()
			{
				this.ToggleSettingsMenu("properties", false);
			});

			propertiesButton.gameObject.SetActive(false);


			 Button loadoutButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.topLeft, new Vector2(128,-500.9f), new Vector2(100,100), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), gameObject, "LoadoutButton", "EditorAssets/icons/ico_loadout.png");

			loadoutButton.onClick.AddListener(delegate()
			{
				this.ToggleSettingsMenu("playerloadout", false);
			});


			positionButton.onClick.AddListener(delegate()
			{
				this.ChangeEditType("position");
			});


			Button rotationButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.topRight, new Vector2(-128f, -255.9f), new Vector2(100,100), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), gameObject, "RotationButton", "EditorAssets/icons/ico_rotation.png");

			rotationButton.onClick.AddListener(delegate()
			{
				this.ChangeEditType("rotation");
			});

			Button scaleButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.topRight, new Vector2(-128f, -400f), new Vector2(100,100), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), gameObject, "ScaleButton", "EditorAssets/icons/ico_scale.png");

			scaleButton.onClick.AddListener(delegate()
			{
				this.ChangeEditType("scale");
			});

			Button colorButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.topRight, new Vector2(-128f, -550f), new Vector2(100,100), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), gameObject, "ColorButton", "EditorAssets/icons/ico_color.png");

			colorButton.onClick.AddListener(delegate()
			{
				this.ChangeEditType("color");
			});

			this.EditorButtonsRoot = new GameObject();
			this.EditorButtonsRoot.transform.parent = canvas.transform;

			loadoutButton.transform.parent = EditorButtonsRoot.transform;
			positionButton.transform.parent = this.EditorButtonsRoot.transform;
			colorButton.transform.parent = this.EditorButtonsRoot.transform;
			scaleButton.transform.parent = this.EditorButtonsRoot.transform;
			rotationButton.transform.parent = this.EditorButtonsRoot.transform;

			GameObject PanelOBJ = MFPEditorUtils.ReturnCreateNewPanel(MFPEditorUtils.UIAnchor.middle, new Vector2(0,0), new Vector2(628.2f, 440.51f), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), new Color32(255,255,255, 100), gameObject, "EntityPanel", "");



			 PropertiesPanel = MFPEditorUtils.ReturnCreateNewPanel(MFPEditorUtils.UIAnchor.middle, new Vector2(0,0), new Vector2(938.5f, 731.4f), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), new Color32(255,53,84, 100), gameObject, "PropertiesPanel", "");

			PropertiesPanel.SetActive(false);

			LoadoutPanel = MFPEditorUtils.ReturnCreateNewPanel(MFPEditorUtils.UIAnchor.middle, new Vector2(0,0), new Vector2(938.5f, 731.4f), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), new Color32(255,53,84, 100), gameObject, "LoadoutPanel", "");

			 testPistolToggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(-50, 320), new Vector2(50,50), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), LoadoutPanel, "pistolToggle","", "");

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter, new Vector3(-125, 320), new Vector3(1,1), new Vector3(0.5f, 0.5f), new Vector3(1,1,1), Arial, Color.black, VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, LoadoutPanel, "Pistol:", "pistolText", 28);

			testPistolToggle.onValueChanged.AddListener(delegate{UpdatePlayerLoadout(1, testPistolToggle.isOn);});

			 dualPistolToggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(-50, 240), new Vector2(50,50), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), LoadoutPanel, "dualpistolToggle","", "");

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter, new Vector3(-155, 240), new Vector3(1,1), new Vector3(0.5f, 0.5f), new Vector3(1,1,1), Arial, Color.black, VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, LoadoutPanel, "Dual Pistol:", "dualPistolText", 28);

			dualPistolToggle.onValueChanged.AddListener(delegate{UpdatePlayerLoadout(2, dualPistolToggle.isOn);});

			 uziToggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(-50, 160), new Vector2(50,50), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), LoadoutPanel, "uziToggle","", "");

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter, new Vector3(-110, 160), new Vector3(1,1), new Vector3(0.5f, 0.5f), new Vector3(1,1,1), Arial, Color.black, VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, LoadoutPanel, "Uzi:", "uziText", 28);

			uziToggle.onValueChanged.AddListener(delegate{UpdatePlayerLoadout(3, uziToggle.isOn);});

			 dualUziToggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(-50, 80), new Vector2(50,50), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), LoadoutPanel, "dualuziToggle","", "");

			
			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter, new Vector3(-135, 80), new Vector3(1,1), new Vector3(0.5f, 0.5f), new Vector3(1,1,1), Arial, Color.black, VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, LoadoutPanel, "Dual Uzi:", "dualUziText", 28);

			dualUziToggle.onValueChanged.AddListener(delegate{UpdatePlayerLoadout(4, dualUziToggle.isOn);});

			 shotgunToggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(-50, 0), new Vector2(50,50), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), LoadoutPanel, "shotgunToggle","", "");

			shotgunToggle.onValueChanged.AddListener(delegate{UpdatePlayerLoadout(6, shotgunToggle.isOn);});

			
			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter, new Vector3(-140, 0), new Vector3(1,1), new Vector3(0.5f, 0.5f), new Vector3(1,1,1), Arial, Color.black, VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, LoadoutPanel, "Shotgun:", "shotgunText", 28);


			 assaultRifleToggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(-50, -80), new Vector2(50,50), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), LoadoutPanel, "assaultRifleToggle","", "");

			assaultRifleToggle.onValueChanged.AddListener(delegate{UpdatePlayerLoadout(5, assaultRifleToggle.isOn);});

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter, new Vector3(-175, -80), new Vector3(1,1), new Vector3(0.5f, 0.5f), new Vector3(1,1,1), Arial, Color.black, VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, LoadoutPanel, "Machine Gun:", "shotgunText", 28);

			 sniperToggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(-50, -160), new Vector2(50,50), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), LoadoutPanel, "sniperToggle","", "");

			sniperToggle.onValueChanged.AddListener(delegate{UpdatePlayerLoadout(9, sniperToggle.isOn);});

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter, new Vector3(-125, -160), new Vector3(1,1), new Vector3(0.5f, 0.5f), new Vector3(1,1,1), Arial, Color.black, VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, LoadoutPanel, "Sniper:", "sniperText", 28);

			shockRifleToggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(-50, -240), new Vector2(50,50), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), LoadoutPanel, "shockRifleToggle","", "");

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter, new Vector3(-160, -240), new Vector3(1,1), new Vector3(0.5f, 0.5f), new Vector3(1,1,1), Arial, Color.black, VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, LoadoutPanel, "Shock Rifle:", "shockRifleText", 28);

			shockRifleToggle.onValueChanged.AddListener(delegate{UpdatePlayerLoadout(7, shockRifleToggle.isOn);});

			 turretGunToggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(-50, -320), new Vector2(50,50), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), LoadoutPanel, "turretGunToggle","", "");

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter, new Vector3(-155, -320), new Vector3(160,30), new Vector3(0.5f, 0.5f), new Vector3(1,1,1), Arial, Color.black, VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, LoadoutPanel, "Turret Gun:", "turretGunText", 28);

			turretGunToggle.onValueChanged.AddListener(delegate{UpdatePlayerLoadout(8, turretGunToggle.isOn);});
			
			 crossbowToggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(150, 320), new Vector2(50,50), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), LoadoutPanel, "crossbowToggle","", "");

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter, new Vector3(50, 320), new Vector3(1,1), new Vector3(0.5f, 0.5f), new Vector3(1,1,1), Arial, Color.black, VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, LoadoutPanel, "Crossbow:", "crossbowText", 28);

			crossbowToggle.onValueChanged.AddListener(delegate{UpdatePlayerLoadout(10, crossbowToggle.isOn);});


			LoadoutPanel.SetActive(false);


			Button gascanButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.middle, new Vector2(0, 158f), new Vector2(254.86f, 30f), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PanelOBJ, "GasCanisterButton", "");


			gascanButton.onClick.AddListener(delegate()
			{
				this.SpawnEntity("gascanister", false, new Vector3(0,0,0), new Vector3(0,0,0), new Vector3(0,0,0));
			});


			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter,new Vector2(0,0), new Vector2(100,100), new Vector2(0.5f,0.5f), new Vector3(0.45943f, 0.45943f, 0.45943f), Arial, new Color32(0,0,0,255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, gascanButton.gameObject, "Gas Canister", "GasCanisterButtonText", 64);

			Button fpanButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.middle, new Vector2(0, 115f), new Vector2(254.86f, 30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PanelOBJ, "FryingPanButton");

			fpanButton.onClick.AddListener(delegate()
			{
				this.SpawnEntity("fryingpan", false, new Vector3(0,0,0), new Vector3(0,0,0), new Vector3(0,0,0));
			});

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter,new Vector2(0,0), new Vector2(100,100), new Vector2(0.5f,0.5f), new Vector3(0.45943f, 0.45943f, 0.45943f), Arial, new Color32(0,0,0,255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, fpanButton.gameObject, "Frying Pan", "FryingPanButtonText", 64);

			Button skateBoardButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.middle, new Vector2(0, 72), new Vector2(254.86f, 30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PanelOBJ, "SkateboardButton");

			skateBoardButton.onClick.AddListener(delegate()
			{
				this.SpawnEntity("skateboard", false, new Vector3(0,0,0), new Vector3(0,0,0), new Vector3(0,0,0));
			});

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter,new Vector2(0,0), new Vector2(100,100), new Vector2(0.5f,0.5f), new Vector3(0.45943f, 0.45943f, 0.45943f), Arial, new Color32(0,0,0,255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, skateBoardButton.gameObject, "Skateboard", "SkateboardButtonText", 64);


			Button flipTableButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.middle, new Vector2(0, 30), new Vector2(254.86f, 30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PanelOBJ, "flipTableButton");

			flipTableButton.onClick.AddListener(delegate()
			{
				this.SpawnEntity("fliptable", false, new Vector3(0,0,0), new Vector3(0,0,0), new Vector3(0,0,0));
			});

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter,new Vector2(0,0), new Vector2(100,100), new Vector2(0.5f,0.5f), new Vector3(0.45943f, 0.45943f, 0.45943f), Arial, new Color32(0,0,0,255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, flipTableButton.gameObject, "Flippable Table", "flipTableButtonText", 64);


			Button lightButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.middle, new Vector2(0, 0), new Vector2(254.86f, 30), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PanelOBJ, "lightButton");

			lightButton.onClick.AddListener(delegate()
			{
				this.SpawnEntity("light", false, new Vector3(0,0,0), new Vector3(0,0,0), new Vector3(0,0,0));
			});

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.MiddleCenter,new Vector2(0,0), new Vector2(100,100), new Vector2(0.5f,0.5f), new Vector3(0.45943f, 0.45943f, 0.45943f), Arial, new Color32(0,0,0,255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, lightButton.gameObject, "Light", "lightButtonText", 64);



			this.EntitySpawnRoot = PanelOBJ;

			GameObject PanelOBJ2 = MFPEditorUtils.ReturnCreateNewPanel(MFPEditorUtils.UIAnchor.middle, new Vector2(0,0), new Vector2(576.2f, 447.6f), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), new Color(255,255,255, 160), gameObject, "WorldSettingsContainer", "");

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.UpperLeft,new Vector2(-216, 187), new Vector2(160, 30), new Vector2(0.5f,0.5f), new Vector3(0.45943f, 0.45943f, 0.45943f), Arial, new Color32(0,0,0,255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PanelOBJ2, "Allow Post Processing:", "AllowPostProcessText", 64);



			Toggle toggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(97.5f, 175.6f), new Vector2(20.41f, 20f), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PanelOBJ2, "PostProcessingCheckmarkToggle", "", "");

			allowPostProcessToggle = toggle;
			toggle.isOn = true;


			this.WorldSettingsRoot = PanelOBJ2;
			this.WorldSettingsRoot.SetActive(false);

			Button worldSettingsButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.topRight, new Vector2(-128f, -700f), new Vector2(100,100), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), gameObject, "WorldSettingsButton", "EditorAssets/icons/ico_world.png");

			worldSettingsButton.onClick.AddListener(delegate()
			{
				this.ToggleSettingsMenu("world", false);
			});

			toggle.onValueChanged.AddListener(delegate{AdjustPostProcessing(toggle.isOn, bloomIntensity, allowColorGrading, SkyColor, allowFog);});

			Button entitiesButton = MFPEditorUtils.ReturnCreateNewButton(MFPEditorUtils.UIAnchor.topRight, new Vector2(-128f, -850f), new Vector2(100,100), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), gameObject, "EntitiesButton", "EditorAssets/icons/ico_entities.png");

			entitiesButton.onClick.AddListener(delegate()
			{
				this.ToggleSettingsMenu("entities", false);
			});

			toggle.onValueChanged.AddListener(delegate{AdjustPostProcessing(toggle.isOn, bloomIntensity, allowColorGrading, SkyColor, allowFog);});

			
			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.UpperLeft,new Vector2(-235, 125f), new Vector2(100,100), new Vector2(0.5f,0.5f), new Vector3(0.49257f, 0.49257f, 0.49257f), Arial, new Color32(0,0,0,255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PanelOBJ2, "Allow Color Grading:", "AllowPostProcessText", 64);


			allowColorGradingToggle = MFPEditorUtils.ReturnCreateNewToggle(MFPEditorUtils.UIAnchor.middle, new Vector2(97.5f, 121.1f), new Vector2(20.41f, 20f), new Vector2(0.5f, 0.5f), new Vector3(1,1,1), PanelOBJ2, "ColorGradToggle", "", "");
			allowColorGradingToggle.isOn = true;

			string[] options = new string[2];
			options[0] = "NORMAL";
			options[1] = "SKYFALL";

			MFPEditorUtils.CreateNewText(MFPEditorUtils.UIAnchor.middle, TextAnchor.UpperLeft,new Vector2(-252, 80f), new Vector2(100,100), new Vector2(0.5f,0.5f), new Vector3(0.49257f, 0.49257f, 0.49257f), Arial, new Color32(0,0,0,255), VerticalWrapMode.Overflow, HorizontalWrapMode.Overflow, PanelOBJ2, "Gamemode:", "ModeText", 64);

			Dropdown modeDropdown = MFPEditorUtils.ReturnCreateNewDropDown(MFPEditorUtils.UIAnchor.middle, new Vector2(-10, 90), new Vector3(160,30), new Vector2(0.5f,0.5f), new Vector3(1,1,1), options, PanelOBJ2);

			modeDropdown.onValueChanged.AddListener(delegate{UpdateGamemode(modeDropdown.value);});

			modeDropdown.value = (int)Gamemode;

			gamemodeDropdown = modeDropdown;

			allowColorGradingToggle.onValueChanged.AddListener(delegate{AdjustPostProcessing(allowPostProcess, bloomIntensity, allowColorGradingToggle.isOn, SkyColor, allowFog);});
      
			worldSettingsButton.transform.parent = this.EditorButtonsRoot.transform;
			
			entitiesButton.transform.parent = this.EditorButtonsRoot.transform;

			EntitySpawnRoot.SetActive(false);

			MFPEditorLogger.Log("Hud load complete");
		}

		public void UpdateGamemode(int mode)
		{
			Gamemode = (LevelEditorHandler.MFPGamemode)mode;
		}

		// Token: 0x0600061A RID: 1562
		public void EditingMode()
		{
			if(Input.GetKey(KeyCode.LeftControl) && Input.GetKey(KeyCode.C))
			{
				CopiedObject = EditingObject;
			}

			if (Input.GetKeyDown(KeyCode.L) && this.EditingObject != this.PlayerSpawn.gameObject && this.EditingObject != this.FinishLevelTrigger)
			{

				UnityEngine.Object.Destroy(this.EditingObject);
				this.Editing = false;
				this.EditingObject = null;
				this.CoordinateField.DeactivateInputField();
				this.CoordinateField.gameObject.SetActive(false);
			}
			bool isFocused = this.CoordinateField.isFocused;
			if (this.CoordinateField.isFocused)
			{
				if (this.editType != "position")
				{
					this.UpdateCoordinates(this.editType, this.CoordinateField.text);
					return;
				}
				this.ExitEditMode();
			}
			else
				{
					if(!this.CoordinateField.isFocused)
					{
					if(this.editType == "position")
					{
						CoordinateField.text = EditingObject.transform.position.ToString(); 
					}
					}
					else
					ExitEditMode();
				}
		}

		// Token: 0x0600061B RID: 1563
		public void UpdateCoordinates(string type, string coordinates)
		{
			if (this.EditingObject != null)
			{
				coordinates = coordinates.Replace("(", "");
				coordinates = coordinates.Replace(")", "");
				coordinates = coordinates.Replace(",", "");
				if (this.editType != "color")
				{
					float num = float.Parse(coordinates.Split(new char[]
					{
						' '
					})[0]);
					float num2 = float.Parse(coordinates.Split(new char[]
					{
						' '
					})[1]);
					float num3 = float.Parse(coordinates.Split(new char[]
					{
						' '
					})[2]);
					if(type == "position")
					{

						CoordinateField.text = coordinates;

					}

					if (type == "rotation")
					{

						this.EditingObject.transform.eulerAngles = new Vector3(num, num2, num3);
					}
					if (type == "scale")
					{

						if(num == 0)
							num = 0.001f;
						if(num2 == 0)
							num2 = 0.001f;
						if(num3 == 0)
							num3 = 0.001f;


						this.EditingObject.transform.localScale = new Vector3(num, num2, num3);
						return;
					}
				}
				else if (type == "color")
				{
					byte bit = Convert.ToByte(coordinates.Split(new char[]
					{
						' '
					})[0]);
					byte bit2 = Convert.ToByte(coordinates.Split(new char[]
					{
						' '
					})[1]);
					byte bit3 = Convert.ToByte(coordinates.Split(new char[]
					{
						' '
					})[2]);
					Color32 color255 = new Color32(bit, bit2, bit3, byte.MaxValue);
					MFPEditorLogger.Log(color255.ToString());
					this.EditingObject.GetComponent<MeshRenderer>().material.color = color255;
				}
			}
		}


		// Token: 0x0600061C RID: 1564
		public void ChangeEditType(string type)
		{

			if(SnapToBuild)
			{
				SnapToBuild = false;
				ToggleSnapping(false);
			}

			if(adjustingSettings)
				ToggleSettingsMenu(null, true);

			this.editType = type;

			
			if(Editing)
			{
				ExitEditMode();
				if(PreviousObject != null);
				EnterEditMode(PreviousObject);
			}

		}

		// Token: 0x0600061D RID: 1565
		public void EnterEditMode(GameObject gobject)
		{
			if(Editing)
				ExitEditMode();

			if(tutorialContinuing)
			{
				if(MFPLevelEditorTutorial.Inst != null)
				{
					if(MFPLevelEditorTutorial.Inst.tutorialState == MFPLevelEditorTutorial.MFPTutorialState.ENTER_EDIT_MODE)
					{
						MFPLevelEditorTutorial.Inst.OnTaskAccomplished();
					}
					else
						if(MFPLevelEditorTutorial.Inst.tutorialState != MFPLevelEditorTutorial.MFPTutorialState.ADJUST_PROPERTIES)
						return;
				}
			}


			this.EditingObject = gobject;

			this.CoordinateField.gameObject.SetActive(true);
			if (this.editType != "position")
			{
				this.CoordinateField.ActivateInputField();
			}
			if (this.editType == "position")
			{
				this.CoordinateField.text = gobject.transform.position.ToString();
				gobject.GetComponent<MeshRenderer>().material = StandardShaderUtils.ChangeRenderMode(gobject.GetComponent<MeshRenderer>().material, StandardShaderUtils.BlendMode.Transparent);
				Color color = gobject.GetComponent<MeshRenderer>().material.color;
				color.a = 0.5f;
				this.ToggleEditingObjectColliders(gobject, false);
				Material material = new Material(Shader.Find("Standard"));
				gobject.GetComponent<MeshRenderer>().material.color = color;
				GameObject gameObject = new GameObject();
				gameObject.name = "AxeContainer";
				gameObject.transform.parent = gobject.transform;
				GameObject gameObject2 = new GameObject();
				gameObject2.AddComponent<MeshFilter>().mesh = this.EditorAxeMesh;
				gameObject2.AddComponent<MeshRenderer>();
				gameObject2.GetComponent<MeshRenderer>().material = material;
				gameObject2.GetComponent<MeshRenderer>().material.color = new Color(1f, 0f, 0f);
				gameObject2.transform.position = gobject.transform.position;
				gameObject2.transform.eulerAngles = new Vector3(0f, 90f, 0f);
				gameObject2.AddComponent<MeshCollider>().sharedMesh = this.EditorAxeMesh;
				gameObject2.GetComponent<MeshCollider>().convex = true;
				gameObject2.AddComponent<LevelEditorAxis>().axis = LevelEditorAxis.AxisType.x;
				gameObject2.name = "X Axis";
				GameObject gameObject3 = new GameObject();
				gameObject3.AddComponent<MeshFilter>().mesh = this.EditorAxeMesh;
				gameObject3.AddComponent<MeshRenderer>();
				gameObject3.GetComponent<MeshRenderer>().material = material;
				gameObject3.GetComponent<MeshRenderer>().material.color = new Color(0f, 1f, 0f);
				gameObject3.transform.position = gobject.transform.position;
				gameObject3.transform.eulerAngles = new Vector3(90f, 0f, 0f);
				gameObject3.AddComponent<MeshCollider>().sharedMesh = this.EditorAxeMesh;
				gameObject3.GetComponent<MeshCollider>().convex = true;
				gameObject3.AddComponent<LevelEditorAxis>().axis = LevelEditorAxis.AxisType.y;
				gameObject3.name = "Y Axis";
				GameObject gameObject4 = new GameObject();
				gameObject4.AddComponent<MeshFilter>().mesh = this.EditorAxeMesh;
				gameObject4.AddComponent<MeshRenderer>();
				gameObject4.GetComponent<MeshRenderer>().material = material;
				gameObject4.GetComponent<MeshRenderer>().material.color = new Color(0f, 0f, 1f);
				gameObject4.transform.position = gobject.transform.position;
				gameObject4.AddComponent<MeshCollider>().sharedMesh = this.EditorAxeMesh;
				gameObject4.GetComponent<MeshCollider>().convex = true;
				gameObject4.AddComponent<LevelEditorAxis>().axis = LevelEditorAxis.AxisType.z;
				gameObject4.name = "Z Axis";
				gameObject2.transform.parent = gameObject.transform;
				gameObject3.transform.parent = gameObject.transform;
				gameObject4.transform.parent = gameObject.transform;
				this.EditAxes = gameObject;
			}
			if (this.editType == "rotation")
			{
				if (this.EditingObject == this.PlayerSpawn.gameObject || this.EnemySpawnpoints.Contains(this.EditingObject.transform))
				{
					this.ExitEditMode();
					this.Editing = false;
				}
				this.CoordinateField.text = gobject.transform.eulerAngles.ToString();
			}
			if (this.editType == "scale")
			{
				if (this.EditingObject == this.PlayerSpawn.gameObject || this.EnemySpawnpoints.Contains(this.EditingObject.transform))
				{
					this.ExitEditMode();
					this.Editing = false;
				}
				this.CoordinateField.text = gobject.transform.localScale.ToString();
			}
			if (this.editType == "color")
			{
				if (this.EditingObject == this.PlayerSpawn.gameObject || this.EnemySpawnpoints.Contains(this.EditingObject.transform))
				{
					this.ExitEditMode();
					this.Editing = false;
				}

				Color32 Color255 = (Color32)gobject.GetComponent<MeshRenderer>().material.color;

				string totext255 = Color255.ToString();
				totext255 = totext255.Replace("RGBA", "");

				MFPEditorLogger.Log(totext255.ToString());
				this.CoordinateField.text = totext255;
			}
			this.Editing = true;

			propertiesButton.gameObject.SetActive(true);

			if(PropertiesPanel.activeSelf)
				PropertiesSetup(PropertiesWarmup(EditingObject.name));
		}

		// Token: 0x0600061E RID: 1566
		public void PlayMode()
		{
			this.Player.transform.position = this.PlayerSpawn.transform.position;
			this.Player.GetComponent<Rigidbody>().velocity = new Vector3(0,0,0);
			DoMissingArrayCleanup();

			if (!this.PlayMod)
			{
				if (this.Editing)
				{
					this.ExitEditMode();
				}
				root.stopSpeechBubble();
				root.dontAllowActionMode = false;
				root.pedroHintTimer = 0;
				this.EditorButtonsRoot.SetActive(false);
				this.ToggleSettingsMenu(null, true);
				this.root.nrOfEnemiesTotal = 0;
				LevelEditorHandler.levelTimer = 0f;
				this.PlayerSpawn.GetComponent<CapsuleCollider>().enabled = false;
				this.PlayerSpawn.GetComponent<MeshRenderer>().enabled = false;
				this.Player.transform.position = this.PlayerSpawn.transform.position;
				ToggleHUD(true);
				this.Player.SetActive(true);

			
				playerScript.dodging = false;
				playerScript.nrOfDodgeSpins = 0;
				playerScript.onGround = true;
				playerScript.xSpeed = 0;
				playerScript.ySpeed = 0;
				playerScript.dodgeSpinAngle = 0;
				playerScript.health = 1;

				Player.GetComponent<Rigidbody>().velocity = new Vector3(0,0,0);
				
				PreparePlayerLoadout();

				this.Camera.SetActive(true);
				Camera.transform.position = new Vector3(0,0, Camera.transform.position.z);
				Camera.GetComponent<CameraScript>().camPos = Camera.transform.position;
				Camera.GetComponent<CameraScript>().fakePos = Camera.transform.position;


				this.CoordinateField.DeactivateInputField();
				this.CoordinateField.gameObject.SetActive(false);
				this.EditorCamera.enabled = false;
				this.EditorCamera.transform.parent.GetComponent<CameraMovement>().enabled = false;
				this.PlayMod = true;
				TextureTilingController[] array = UnityEngine.Object.FindObjectsOfType<TextureTilingController>();
				for (int j = 0; j < array.Length; j++)
				{
					array[j].enabled = false;
				}

				foreach(DisappearPlatformScript platformScript in GameObject.FindObjectsOfType<DisappearPlatformScript>())
				{
					platformScript.enabled = true;
				}
				foreach(GameObject table in levelFlipTables)
				{
					if(table.GetComponent<TableFlipScript>() == null)
					{
						table.AddComponent<TableFlipScript>().startPos = table.transform.position;
					}
				}


				foreach(GameObject Canister in GasCanisters)
				{
					GameObject newCanister = Instantiate(GasCanister);
					newCanister.SetActive(true);

					newCanister.layer = 14;
					newCanister.AddComponent<Rigidbody>();
					newCanister.GetComponent<Rigidbody>().mass = 10;
					newCanister.GetComponent<Rigidbody>().drag = 0.1f;
					newCanister.GetComponent<Rigidbody>().angularDrag = 0.05f;


					newCanister.AddComponent<AudioSource>();
					newCanister.AddComponent<PhysicsSoundsScript>();
					newCanister.AddComponent<AutoAimTargetScript>();
					newCanister.AddComponent<OptimizerScript>();

					newCanister.GetComponent<GasCanisterScript>().explosionSize = Canister.GetComponent<GasCanisterScript>().explosionSize;

					LevelGasCanisters.Add(newCanister);

					Canister.SetActive(false);
				}


				foreach(GameObject Pan in FryingPans)
				{
					GameObject newPan = Instantiate(FryingPan);
					newPan.SetActive(true);

					newPan.layer = 14;
					newPan.transform.tag = "BounceBullet";
					newPan.AddComponent<Rigidbody>();
					newPan.GetComponent<Rigidbody>().mass = 10;
					newPan.GetComponent<Rigidbody>().drag = 0.1f;
					newPan.GetComponent<Rigidbody>().angularDrag = 0.05f;

					newPan.AddComponent<ObjectKickScript>().objType = 1;
					newPan.AddComponent<AudioSource>();
					newPan.AddComponent<PhysicsSoundsScript>();
					newPan.AddComponent<AutoAimTargetScript>();
					newPan.AddComponent<OptimizerScript>();

					LevelFryingPans.Add(newPan);

					Pan.SetActive(false);
				}

				foreach(GameObject board in Skateboards)
				{
					GameObject newSkateboard = Instantiate(Skateboard);
					newSkateboard.SetActive(true);

					newSkateboard.AddComponent<Rigidbody>();
					newSkateboard.GetComponent<Rigidbody>().mass = 10;
					newSkateboard.GetComponent<Rigidbody>().drag = 0.1f;
					newSkateboard.GetComponent<Rigidbody>().angularDrag = 0.05f;
	

					newSkateboard.AddComponent<ObjectKickScript>().objType = 2;
					newSkateboard.AddComponent<AudioSource>();
					newSkateboard.AddComponent<PhysicsSoundsScript>();
					newSkateboard.AddComponent<AutoAimTargetScript>();
					newSkateboard.AddComponent<OptimizerScript>();
					newSkateboard.AddComponent<SkateboardScript>();

					foreach(Collider collider in newSkateboard.GetComponentsInChildren<Collider>())
					{
						collider.enabled = true;
					}

					LevelSkateboards.Add(newSkateboard);

					board.SetActive(false);
				}


				SetupGameMode(Gamemode);

				this.FinishLevelTrigger.GetComponent<MeshRenderer>().enabled = false;
				if(Gamemode != MFPGamemode.SKYFALL)
				{
					FinishLevelTrigger.GetComponent<BoxCollider>().enabled = true;
					this.FinishLevelTrigger.GetComponent<BoxCollider>().isTrigger = true;
				}
				else
					FinishLevelTrigger.GetComponent<BoxCollider>().enabled = false;

				this.root.nrOfEnemiesTotal = this.root.nrOfEnemiesTotal / 2;
				this.root.nrOfEnemiesTotal -= this.root.nrOfEnemiesTotal;
				this.CalculateLevelHash();
				this.root.dontAllowCheckpointSave = true;

				levelInitialized = true;

				return;
			}
			if (this.PlayMod && !root.levelEnded)
			{

				//MFPEditorUtils.doPedroHint(LevelEditorInfo.levelEditorHints[UnityEngine.Random.Range(0, LevelEditorInfo.levelEditorHints.Length)], -99999);

				root.dontAllowActionMode = true;
				this.EditorButtonsRoot.SetActive(true);
				LevelEditorHandler.levelTimer = 0f;
				this.Player.transform.position = this.PlayerSpawn.transform.position;
				this.PlayerSpawn.GetComponent<CapsuleCollider>().enabled = true;
				ToggleHUD(false);
				ClearAllPlayerWeapons();
				this.Player.SetActive(false);
				this.Camera.SetActive(false);
				this.EditorCamera.enabled = true;
				this.EditorCamera.transform.parent.GetComponent<CameraMovement>().enabled = true;
				this.PlayMod = false;
				foreach (GameObject obj in this.Enemies)
				{
					UnityEngine.Object.Destroy(obj);
				}
				TextureTilingController[] array2 = UnityEngine.Object.FindObjectsOfType<TextureTilingController>();
				for (int k = 0; k < array2.Length; k++)
				{
					array2[k].enabled = true;
				}
				foreach (Transform transform2 in this.EnemySpawnpoints)
				{
					transform2.gameObject.GetComponent<MeshRenderer>().enabled = true;
					transform2.gameObject.GetComponent<CapsuleCollider>().enabled = true;
				}

				PostPlayModeCleanup();


				this.PlayerSpawn.GetComponent<MeshRenderer>().enabled = true;
				this.FinishLevelTrigger.GetComponent<MeshRenderer>().enabled = true;
				this.FinishLevelTrigger.GetComponent<BoxCollider>().isTrigger = false;
				this.Enemies.Clear();

				levelInitialized = false;


				DoMissingArrayCleanup();
			}
		}

		// Token: 0x0600061F RID: 1567
		public void ExitEditMode()
		{
			string text = this.CoordinateField.text;
			this.CoordinateField.DeactivateInputField();
			this.CoordinateField.gameObject.SetActive(false);
			if (this.EditAxes != null)
			{
				UnityEngine.Object.Destroy(this.EditAxes);
				this.EditingObject.GetComponent<MeshRenderer>().material = StandardShaderUtils.ChangeRenderMode(this.EditingObject.GetComponent<MeshRenderer>().material, StandardShaderUtils.BlendMode.Opaque);
				Color color = this.EditingObject.GetComponent<MeshRenderer>().material.color;
				color.a = 1f;
				this.EditingObject.GetComponent<MeshRenderer>().material.color = color;
			}
			this.ToggleEditingObjectColliders(this.EditingObject, true);
			PreviousObject = EditingObject;
			this.EditingObject = null;
			this.Editing = false;

			propertiesButton.gameObject.SetActive(false);
			if(PropertiesPanel.activeSelf)
				ToggleSettingsMenu("properties", false);


		}

		// Token: 0x06000620 RID: 1568
		public void LoadEditorAssets()
		{
			Arial =  Resources.GetBuiltinResource(typeof(Font), "Arial.ttf") as Font; 
			this.EditorAxeMesh = FastObjImporter.Instance.ImportFile(MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/axe.obj"));
			lightModel = FastObjImporter.Instance.ImportFile(MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/lightmodel.obj"));
			this.DefaultTexture = MFPEditorUtils.LoadPNG(MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/dev_measuregeneric01b.png"));
			string texname = MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/dev_measuregeneric01b.png");
			texname = texname.Replace(MFPEditorUtils.LoadFileFromDataFolder(""), "");
			MFPEditorLogger.Log("Texture name is: " + texname);
			this.DefaultTexture.name = texname;

			DefaultStandardShader = new Material(Shader.Find("Standard"));
			
		}

		// Token: 0x06000621 RID: 1569
		public string LoadFileFromDataFolder(string file)
		{
			return Application.dataPath + "/LevelEditor_Jhrino/" + file;
		}

		// Token: 0x06000622 RID: 1570
		public void ToggleEditingObjectColliders(GameObject gobject, bool toggle)
		{
			if (gobject != null)
			{
				if (toggle)
				{
					gobject.GetComponent<Collider>();
					gobject.GetComponent<Collider>().enabled = true;
					return;
				}
				gobject.GetComponent<Collider>();
				gobject.GetComponent<Collider>().enabled = false;
			}
		}

		public void DoMissingArrayCleanup()
		{

			for (int i = this.EnemySpawnpoints.Count - 1; i > -1; i--)
			{
				if (this.EnemySpawnpoints[i] == null)
				{
					this.EnemySpawnpoints.RemoveAt(i);
				}
			}
			for (int j = this.GeometryWallLump.Count - 1; j > -1; j--)
			{
				if (this.GeometryWallLump[j] == null)
				{
					this.GeometryWallLump.RemoveAt(j);
				}
			}
			for (int j = this.GeometryFloorLump.Count - 1; j > -1; j--)
			{
				if (this.GeometryFloorLump[j] == null)
				{
					this.GeometryFloorLump.RemoveAt(j);
				}
			}

			for (int j = GasCanisters.Count - 1; j > -1; j--)
			{
				if (this.GasCanisters[j] == null)
				{
					this.GasCanisters.RemoveAt(j);
				}
			}

			
			for (int j = LevelGasCanisters.Count - 1; j > -1; j--)
			{
				if (this.LevelGasCanisters[j] == null)
				{
					this.LevelGasCanisters.RemoveAt(j);
				}
			}


			for (int j = FryingPans.Count - 1; j > -1; j--)
			{
				if (this.FryingPans[j] == null)
				{
					this.FryingPans.RemoveAt(j);
				}
			}

			
			for (int j = LevelFryingPans.Count - 1; j > -1; j--)
			{
				if (this.LevelFryingPans[j] == null)
				{
					this.LevelFryingPans.RemoveAt(j);
				}
			}

			for (int j = Skateboards.Count - 1; j > -1; j--)
			{
				if (this.Skateboards[j] == null)
				{
					this.Skateboards.RemoveAt(j);
				}
			}

			
			for (int j = LevelSkateboards.Count - 1; j > -1; j--)
			{
				if (this.LevelSkateboards[j] == null)
				{
					this.LevelSkateboards.RemoveAt(j);
				}
			}

			for (int j = this.BrushLump.Count - 1; j > -1; j--)
			{
				if (this.BrushLump[j] == null)
				{
					this.BrushLump.RemoveAt(j);
				}
			}

			for(int j = levelFlipTables.Count - 1; j > -1; j--)
			{
				if(levelFlipTables[j] == null)
					levelFlipTables.RemoveAt(j);
			}

		}

		// Token: 0x06000623 RID: 1571
		public void PrototypeSave()
		{
			DoMissingArrayCleanup();


			foreach(GameObject obj in GameObject.FindObjectsOfType<GameObject>())
			{
				if(obj.name == "Floor" && !GeometryFloorLump.Contains(obj))
					GeometryFloorLump.Add(obj);
			}

			List<string> SavedLevel = new List<string>();
			string item = this.PlayerSpawn.position.ToString().Replace("(", "").Replace(")", "").Replace(",", "");
			string item2 = this.FinishLevelTrigger.transform.position.ToString().Replace("(", "").Replace(")", "").Replace(",", "");
			SavedLevel.Add("!World");
			SavedLevel.Add("allowPostProcess = " + this.allowPostProcess.ToString());
			SavedLevel.Add("bloomIntensity = " + this.Camera.GetComponent<PostProcessingBehaviour>().profile.bloom.settings.bloom.intensity.ToString());
			SavedLevel.Add("allowColorGrading = " + this.allowColorGrading.ToString());
			SavedLevel.Add("theme = " + this.theme);
			SavedLevel.Add("SkyColor = " + BackgroundCamera.GetComponent<Camera>().backgroundColor.ToString().Replace("(", "").Replace(")", "").Replace(",", "").Replace("RGBA", ""));
			SavedLevel.Add("gamemode = " + Gamemode.ToString());
			SavedLevel.Add("!Player");
			SavedLevel.Add(item);
			SavedLevel.Add("!LevelEnd");
			SavedLevel.Add(item2);
			SavedLevel.Add(this.FinishLevelTrigger.transform.localScale.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
			SavedLevel.Add("!Equipment");
			SavedLevel.Add(pistol.ToString());
			SavedLevel.Add(dualPistol.ToString());
			SavedLevel.Add(uzi.ToString());
			SavedLevel.Add(dualUzi.ToString());
			SavedLevel.Add(shotgun.ToString());
			SavedLevel.Add(assaultRifle.ToString());
			SavedLevel.Add(sniper.ToString());
			SavedLevel.Add(crossbow.ToString());
			SavedLevel.Add(shockRifle.ToString());
			SavedLevel.Add(turretGun.ToString());

			MFPEditorLogger.Log("player coordinates added");
			MFPEditorLogger.Log("----");
			int num = 2;
			while (this.EnemySpawnpoints.ElementAtOrDefault(num - 2) != null)
			{
				string text = this.EnemySpawnpoints[num - 2].transform.position.ToString().Replace("(", "").Replace(")", "").Replace(",", "");
				SavedLevel.Add("!EnemySpawn");
				SavedLevel.Add(text);
				SavedLevel.Add(this.EnemySpawnpoints[num-2].GetComponent<MFPEnemySpawner>().enemyWeapon.ToString());
	
				num++;
			}
			MFPEditorLogger.Log("----");
			foreach (GameObject lump in this.GeometryWallLump)
			{
				SavedLevel.Add("!GeometryWall");
				SavedLevel.Add(lump.transform.position.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(lump.transform.eulerAngles.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(lump.transform.localScale.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(lump.GetComponent<MeshRenderer>().material.color.ToString().Replace("(", "").Replace(")", "").Replace(",", "").Replace("RGBA", ""));

				string properties = "";

				properties += lump.layer;
				if(lump.GetComponent<DisappearPlatformScript>())
					properties += ",true";
				else
					properties += ",false";


				SavedLevel.Add(properties);

				SavedLevel.Add(lump.GetComponent<MeshRenderer>().material.mainTexture.name);
			}

			foreach (GameObject lump in this.GeometryFloorLump)
			{
				SavedLevel.Add("!GeometryFloor");
				SavedLevel.Add(lump.transform.position.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(lump.transform.eulerAngles.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(lump.transform.localScale.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(lump.GetComponent<MeshRenderer>().material.color.ToString().Replace("(", "").Replace(")", "").Replace(",", "").Replace("RGBA", ""));

				string properties = "";

				properties += lump.layer;
				if(lump.GetComponent<DisappearPlatformScript>())
					properties += ",true";
				else
					properties += ",false";			

				SavedLevel.Add(properties);
				SavedLevel.Add(lump.GetComponent<MeshRenderer>().material.mainTexture.name);
			}

			foreach(GameObject gasCanister in GasCanisters)
			{
				SavedLevel.Add("!Entity");
				SavedLevel.Add("entityType = gasCanister");
				SavedLevel.Add(gasCanister.transform.position.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(gasCanister.transform.eulerAngles.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(gasCanister.transform.localScale.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(gasCanister.GetComponent<GasCanisterScript>().explosionSize.ToString());
			}

			foreach(GameObject pan in FryingPans)
			{
				SavedLevel.Add("!Entity");
				SavedLevel.Add("entityType = fryingPan");
				SavedLevel.Add(pan.transform.position.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(pan.transform.eulerAngles.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(pan.transform.localScale.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
			}

			foreach(GameObject board in Skateboards)
			{
				SavedLevel.Add("!Entity");
				SavedLevel.Add("entityType = skateboard");
				SavedLevel.Add(board.transform.position.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(board.transform.eulerAngles.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(board.transform.localScale.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
			}

			foreach(GameObject table in levelFlipTables)
			{
				SavedLevel.Add("!Entity");
				SavedLevel.Add("entityType = flipTable");
				SavedLevel.Add(table.transform.position.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(table.transform.eulerAngles.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
				SavedLevel.Add(table.transform.localScale.ToString().Replace("(", "").Replace(")", "").Replace(",", ""));
			}

			File.WriteAllLines(MFPEditorUtils.LoadFileFromDataFolder("Levels/default/level.txt"), SavedLevel.ToArray());
			this.CalculateLevelHash();
			MFPEditorLogger.Log("----");
		}

	public void ToggleSnapping(bool toggle)
	{
	  if(!toggle)
		{
			foreach(snaphelper snaphelping in GameObject.FindObjectsOfType<snaphelper>())
			{
				snaphelping.GetComponent<Collider>().enabled = false;
			}
		}
	  else
		{
			foreach(snaphelper snaphelping in GameObject.FindObjectsOfType<snaphelper>())
			{
				snaphelping.GetComponent<Collider>().enabled = true;
			}
		}
	}


public void DoObjectCleanup()
{
	DoMissingArrayCleanup();

	foreach (GameObject obj in this.BrushLump)
	{
		if(obj != null)
		UnityEngine.Object.Destroy(obj);
	}
	foreach (GameObject obj in this.GeometryWallLump)
	{
		if(obj != null)
		UnityEngine.Object.Destroy(obj);
	}

	foreach (GameObject obj in this.GeometryFloorLump)
	{
		if(obj != null)
		UnityEngine.Object.Destroy(obj);
	}
	foreach (Transform transform in this.EnemySpawnpoints)
	{
				if(transform != null)
		UnityEngine.Object.Destroy(transform.gameObject);
	}

	foreach (GameObject obj in GasCanisters)
	{
		if(obj != null)
		UnityEngine.Object.Destroy(obj);
	}

	foreach (GameObject obj in FryingPans)
	{
		if(obj != null)
		UnityEngine.Object.Destroy(obj);
	}

	foreach (GameObject obj in Skateboards)
	{
		if (obj != null)
		UnityEngine.Object.Destroy(obj);
	}
}
	
		// Token: 0x06000624 RID: 1572
	public void PrototypeLoad()
		{
			if (this.Editing)
			{
				this.ExitEditMode();
			}
			if(SnapToBuild)
			{
				ToggleSnapping(false);
			}

			string[] levelFile = File.ReadAllLines(MFPEditorUtils.LoadFileFromDataFolder("Levels/default/level.txt"));

			DoObjectCleanup();
			DoMissingArrayCleanup();

			MFPEditorLogger.Log("Loading File");
			MFPEditorLogger.Log("------------");
			string[] array = new string[]
			{
				"!Brush",
				"!GeometryWall",
				"!GeometryFloor",
				"!PlayerSpawn",
				"!EnemySpawn",
				"!LevelEnd"
			};


		int brushCount = 0;

		foreach(string st in levelFile)
		{
			if(st == "!GeometryFloor")
				brushCount++;	
		}

		MFPEditorLogger.Log("Brush floor count in map: " + brushCount.ToString());

		brushCount = 0;

        for (int i = 0; i < levelFile.Length; i++) //WE'RE JUST GONNA READ THE WHOLE THING
        {
            String tag = levelFile[i]; //It SHOULD only hit this line if its a tag
            switch (tag)
            {
				case "!World":
					if(levelFile[i + 1].Contains ("True"))
					{
							allowPostProcess = true;
							MFPEditorLogger.Log("Post processing is enabled");
					}
					if(levelFile[i + 1].Contains("False"))
					{
							allowPostProcess = false;
							MFPEditorLogger.Log("Post processing is disabled");

					}
					float bloomIntensity = float.Parse(levelFile[i + 2].Replace("bloomIntensity = ", ""));


					if(levelFile[i + 3].Contains ("True"))
					{
							allowColorGrading = true;
							MFPEditorLogger.Log("Color grading is enabled");
					}
					if(levelFile[i + 3].Contains("False"))
					{
							allowColorGrading = false;
							MFPEditorLogger.Log("Color grading is disabled");

					}

					AdjustPostProcessing(allowPostProcess, bloomIntensity, allowColorGrading, SkyColor, allowFog);

					allowPostProcessToggle.isOn = allowPostProcess;
					allowColorGradingToggle.isOn = allowColorGrading;


					
					MFPEditorLogger.Log("-------- LEVEL LOAD --------");
					theme = int.Parse(levelFile[i + 4].Replace("theme = ", ""));
					MFPEditorLogger.Log("----------------------------");
					MFPEditorLogger.Log("Level Theme: " + theme);

					float[] Skycolor = Array.ConvertAll(levelFile[i + 5].Replace("SkyColor = ", "").Split(new char[] { ' ' }), float.Parse);


					BackgroundCamera.GetComponent<Camera>().backgroundColor = new Color(Skycolor[0], Skycolor[1], Skycolor[2]);

				    SkyColor = BackgroundCamera.GetComponent<Camera>().backgroundColor;

					switch(levelFile[i + 6].Replace("gamemode = ", ""))
					{
						default:
								MFPEditorLogger.Log("Invalid gamemode " + levelFile[i+6].Replace("gamemode = ", ""));
								Gamemode = MFPGamemode.NORMAL;
								break;
						case "NORMAL":
								Gamemode = MFPGamemode.NORMAL;
								break;
						case "SKYFALL":
								Gamemode = MFPGamemode.SKYFALL;
								break;

					}


					i += 6;
					break;

				case "!Equipment":

						testPistolToggle.isOn = levelFile[i + 1].Equals("True");
						dualPistolToggle.isOn = levelFile[i + 2].Equals("True");
						uziToggle.isOn = levelFile[i + 3].Equals("True");
						dualUziToggle.isOn = levelFile[i + 4].Equals("True");
						shotgunToggle.isOn = levelFile[i + 5].Equals("True");
						assaultRifleToggle.isOn = levelFile[i + 6].Equals("True");
						sniperToggle.isOn = levelFile[i + 7].Equals("True");
						crossbowToggle.isOn = levelFile[i + 8].Equals("True");
						shockRifleToggle.isOn = levelFile[i + 9].Equals("True");
						turretGunToggle.isOn = levelFile[i + 10].Equals("True");
	
						i+= 10;
					break;

				case "!GeometryWall":


					
			        float[] geowallposition = Array.ConvertAll(levelFile[i + 1].Split(new char[] { ' ' }), float.Parse);
                    float[] geowallrotation = Array.ConvertAll(levelFile[i + 2].Split(new char[] { ' ' }), float.Parse);
                    float[] geowallscale = Array.ConvertAll(levelFile[i + 3].Split(new char[] { ' ' }), float.Parse);
                    float[] geowallcolor = Array.ConvertAll(levelFile[i + 4].Split(new char[] { ' ' }), float.Parse);

					string[] properties = levelFile[i + 5].Split(',');

                    string geowalltexturename = levelFile[i + 6];


                    GameObject newWall = Instantiate(wall_Brick);
					newWall.SetActive(true);
                    newWall.transform.position = new Vector3(geowallposition[0], geowallposition[1], geowallposition[2]);
                    newWall.transform.eulerAngles = new Vector3(geowallrotation[0], geowallrotation[1], geowallrotation[2]);
                    newWall.transform.localScale = new Vector3(geowallscale[0], geowallscale[1], geowallscale[2]);
                    newWall.GetComponent<MeshRenderer>().material.color = new Color(geowallcolor[0], geowallcolor[1], geowallcolor[2]);
					
					ConfigureGeometryProperties(newWall, int.Parse(properties[0]), properties[1].Equals("true"), levelFile[i + 6]);

					GeometryWallLump.Add(newWall);

					i+= 6;
					break;
				
				case "!GeometryFloor":


					MFPEditorLogger.Log("Loading brush id: " + brushCount.ToString());

				    float[] geofloorposition = Array.ConvertAll(levelFile[i + 1].Split(new char[] { ' ' }), float.Parse);
                    float[] geofloorrotation = Array.ConvertAll(levelFile[i + 2].Split(new char[] { ' ' }), float.Parse);
                    float[] geofloorscale = Array.ConvertAll(levelFile[i + 3].Split(new char[] { ' ' }), float.Parse);
                    float[] geofloorcolor = Array.ConvertAll(levelFile[i + 4].Split(new char[] { ' ' }), float.Parse);
                  
					string[] floorproperties = levelFile[ i + 5].Split(',');

	

                    GameObject newFloor = Instantiate(floor_Wood);
					newFloor.SetActive(true);
                    newFloor.transform.position = new Vector3(geofloorposition[0], geofloorposition[1], geofloorposition[2]);
                    newFloor.transform.eulerAngles = new Vector3(geofloorrotation[0], geofloorrotation[1], geofloorrotation[2]);
                    newFloor.transform.localScale = new Vector3(geofloorscale[0], geofloorscale[1], geofloorscale[2]);
                    newFloor.GetComponent<MeshRenderer>().material.color = new Color(geofloorcolor[0], geofloorcolor[1], geofloorcolor[2]);

					ConfigureGeometryProperties(newFloor, int.Parse(floorproperties[0]), floorproperties[1].Equals("true"), levelFile[i + 6]);
					GeometryFloorLump.Add(newFloor);
					i+= 6;
					brushCount++;

					break;

                case "!Brush": //ITS A BRUSH
                    //These basically just grab the correct line, split it into an array, and parse it to a float array in 1 line
                    float[] position = Array.ConvertAll(levelFile[i + 1].Split(new char[] { ' ' }), float.Parse);
                    float[] rotation = Array.ConvertAll(levelFile[i + 2].Split(new char[] { ' ' }), float.Parse);
                    float[] scale = Array.ConvertAll(levelFile[i + 3].Split(new char[] { ' ' }), float.Parse);
                    float[] color = Array.ConvertAll(levelFile[i + 4].Split(new char[] { ' ' }), float.Parse);
                    int property = int.Parse(levelFile[i + 5]);
                    string texturename = levelFile[i + 6];

                    GameObject newBrush = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    newBrush.transform.position = new Vector3(position[0], position[1], position[2]);
                    newBrush.transform.rotation = new Quaternion(rotation[0], rotation[1], rotation[2], rotation[3]);
                    newBrush.transform.localScale = new Vector3(scale[0], scale[1], scale[2]);
                    newBrush.GetComponent<MeshRenderer>().material.color = new Color(color[0], color[1], color[2]);
					newBrush.GetComponent<MeshRenderer>().material.mainTexture = MFPEditorUtils.LoadPNG(MFPEditorUtils.LoadFileFromDataFolder(texturename));
					newBrush.GetComponent<MeshRenderer>().material.mainTexture.name = texturename;
					newBrush.AddComponent<TextureTilingController>();
                    newBrush.layer = property;
                    this.BrushLump.Add(newBrush);

                    i += 6;
                    break;

                case "!PlayerSpawn":
                    float[] playerposition = Array.ConvertAll(levelFile[i + 1].Split(new char[] { ' ' }), float.Parse);

                    this.PlayerSpawn.position = new Vector3(playerposition[0], playerposition[1], playerposition[2]);

                    i++;
                    break;

                case "!EnemySpawn":
                    float[] enemyposition = Array.ConvertAll(levelFile[i + 1].Split(new char[] { ' ' }), float.Parse);

                    GameObject gameObject3 = GameObject.CreatePrimitive(0);
					gameObject3.name = "EnemySpawner";
                    Destroy(gameObject3.GetComponent<SphereCollider>());
                    gameObject3.AddComponent<CapsuleCollider>();
                    gameObject3.layer = 8;
                    gameObject3.transform.localScale = new Vector3(gameObject3.transform.localScale.x, 4f, gameObject3.transform.localScale.x);
                    gameObject3.transform.position = new Vector3(enemyposition[0], enemyposition[1], enemyposition[2]);
                    gameObject3.GetComponent<MeshRenderer>().material.color = new Color(1f, 0f, 0f);
					gameObject3.AddComponent<MFPEnemySpawner>().enemyWeapon = int.Parse(levelFile[i + 2]);
                    this.EnemySpawnpoints.Add(gameObject3.transform);

                    i+=2;
                    break;

                case "!LevelEnd":
                    float[] finishposition = Array.ConvertAll(levelFile[i + 1].Split(new char[] { ' ' }), float.Parse);
					float[] finishscale = Array.ConvertAll(levelFile[i + 2].Split(new char[] { ' ' }), float.Parse);

                   this.FinishLevelTrigger.transform.position = new Vector3(finishposition[0], finishposition[1], finishposition[2]);
					this.FinishLevelTrigger.transform.localScale = new Vector3(finishscale[0], finishscale[1], finishscale[2]);
					

                    i += 2;
                    break;
				case "!Entity":
						string entityName = levelFile[i + 1].Replace("entityType = ", "").Replace('"', ' ');
						MFPEditorLogger.Log(entityName);

					   float[] entityposition = Array.ConvertAll(levelFile[i + 2].Split(new char[] { ' ' }), float.Parse);
					   float[] entityrotation = Array.ConvertAll(levelFile[i + 3].Split(new char[] { ' ' }), float.Parse);
					   float[] entityscale = Array.ConvertAll(levelFile[i + 4].Split(new char[] { ' ' }), float.Parse);
					if(entityName.ToLower() != "gascanister")
					SpawnEntity(entityName.ToLower(), true, new Vector3(entityposition[0], entityposition[1], entityposition[2]), new Vector3(entityrotation[0],entityrotation[1], entityrotation[2]), new Vector3(entityscale[0], entityscale[1], entityscale[2]));
					else
					SpawnEntity(entityName.ToLower(), true, new Vector3(entityposition[0], entityposition[1], entityposition[2]), new Vector3(entityrotation[0],entityrotation[1], entityrotation[2]), new Vector3(entityscale[0], entityscale[1], entityscale[2]), Array.ConvertAll(levelFile[i + 5].Split(new char[] { ',' }), element => element.ToString()));
					i+= 4;
					break;


						
            }
        }
			CalculateLevelHash();
			MFPEditorLogger.Log("Loading over");
			ToggleSnapping(false);
			gamemodeDropdown.value = (int)Gamemode;
		}

		// Token: 0x06000625 RID: 1573
		private IEnumerator CheckVersion()
		{
			UnityWebRequest www = UnityWebRequest.Get("https://fronkln.github.io/MFPLevelEditor/version.txt");
			yield return www.SendWebRequest();
			if (www.isNetworkError)
			{
				MFPEditorLogger.Log("couldnt get web data");
			}
			else if (float.Parse(www.downloadHandler.text) != LevelEditorInfo.version)
			{
				Application.OpenURL("https://fronkln.github.io/MFPLevelEditor/outdated.html");
			}
			yield break;
		}

		// Token: 0x06000626 RID: 1574
		private void Awake()
		{
			base.StartCoroutine(this.CheckVersion());
			File.WriteAllLines(MFPEditorLogger.logfile, new string[0]);
			MFPEditorLogger.Log("--------LEVELEDITOR SESSION STARTED--------");
			MFPEditorLogger.Log(DateTime.Now.ToString("MM/dd/yyyy HH:mm"));
			MFPEditorLogger.Log("------------------------------------------");
		}



		public void SetupGameMode(MFPGamemode GMODE)
		{
			switch(GMODE)
			{
				case MFPGamemode.NORMAL:
					playerScript.skyfall = false;
					break;
				case MFPGamemode.SKYFALL:
					playerScript.skyfall = true;
					break;
			}

				MFPEditorLogger.Log("Start spawn");

				foreach(Transform spawn in EnemySpawnpoints)
				{
					spawn.GetComponent<MFPEnemySpawner>().UpdateData();
					spawn.GetComponent<MFPEnemySpawner>().SpawnEnemy();
				}


				MFPEditorLogger.Log("End spawn");
			
		}
public void SpawnEntity(string entity, bool isSaveObject, Vector3 savePosition, Vector3 saveRotation, Vector3 saveScale, string[] properties)
			{
		
				switch(entity)
				{
					default:
						MFPEditorLogger.Log("Invalid entity " + entity + '"');
					break;
					//TODO: Add saving and loading for gas canisters
					case "gascanister":
						if(GasCanister == null)
						{
							GameObject newGasCanister = new GameObject();
							newGasCanister.name = "GasCanister";
							newGasCanister.AddComponent<MeshFilter>().mesh = FastObjImporter.Instance.ImportFile(MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/BaseGame/GasCanister.obj"));
							newGasCanister.AddComponent<MeshRenderer>();
							newGasCanister.GetComponent<MeshRenderer>().material = new Material(DefaultStandardShader);
							newGasCanister.GetComponent<MeshRenderer>().material.mainTexture = MFPEditorUtils.LoadPNG(LoadFileFromDataFolder("EditorAssets/BaseGame/textures/texture_collection_1.png"));
							if(!isSaveObject)
							newGasCanister.transform.position = new Vector3(this.EditorCamera.transform.position.x, this.EditorCamera.transform.position.y, 0);
							else
							{
								newGasCanister.transform.position = savePosition;
								newGasCanister.transform.eulerAngles = saveRotation;
								newGasCanister.transform.localScale = saveScale;
							}
							newGasCanister.AddComponent<BoxCollider>();


							newGasCanister.AddComponent<ObjectKickScript>().objType = 3;
							newGasCanister.AddComponent<GasCanisterScript>().explosionSize = int.Parse(properties[0]);
							newGasCanister.GetComponent<ObjectKickScript>().bounceOnEnemyHit = true;
							newGasCanister.GetComponent<ObjectKickScript>().reactOnBulletHit = true;

							GasCanister = Instantiate(newGasCanister);
							GasCanister.SetActive(false);

							GasCanisters.Add(newGasCanister);
						}
						else
						{
							GameObject preloadedCanister = Instantiate(GasCanister);
							preloadedCanister.name = "GasCanister";

							preloadedCanister.SetActive(true);
							if(!isSaveObject)
							preloadedCanister.transform.position = new Vector3(this.EditorCamera.transform.position.x, this.EditorCamera.transform.position.y, 0);
							else
							{
								preloadedCanister.transform.position = savePosition;
								preloadedCanister.transform.eulerAngles = saveRotation;
								preloadedCanister.transform.localScale = saveScale;
							}

							preloadedCanister.GetComponent<GasCanisterScript>().explosionSize = int.Parse(properties[0]);

							GasCanisters.Add(preloadedCanister);
						}
						break;
			}

			}


		public void SpawnEntity(string entity, bool isSaveObject, Vector3 savePosition, Vector3 saveRotation, Vector3 saveScale)
			{
				
				if(tutorialContinuing)
				{
					if(MFPLevelEditorTutorial.Inst != null)
					{
						if(MFPLevelEditorTutorial.Inst.tutorialState == MFPLevelEditorTutorial.MFPTutorialState.PLACE_ENTITY)
						{
							if(entity == "gascanister")
								MFPLevelEditorTutorial.Inst.OnTaskAccomplished();
							else
								return;
						}
					}
				}

				switch(entity)
				{
					default:
						MFPEditorLogger.Log("Invalid entity " + entity + '"');
					break;
					//TODO: Add saving and loading for gas canisters
					case "gascanister":
						if(GasCanister == null)
						{
							GameObject newGasCanister = new GameObject();
							newGasCanister.name = "GasCanister";
							newGasCanister.AddComponent<MeshFilter>().mesh = FastObjImporter.Instance.ImportFile(MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/BaseGame/GasCanister.obj"));
							newGasCanister.AddComponent<MeshRenderer>();
							newGasCanister.GetComponent<MeshRenderer>().material = new Material(DefaultStandardShader);
							newGasCanister.GetComponent<MeshRenderer>().material.mainTexture = MFPEditorUtils.LoadPNG(LoadFileFromDataFolder("EditorAssets/BaseGame/textures/texture_collection_1.png"));
							if(!isSaveObject)
							newGasCanister.transform.position = new Vector3(this.EditorCamera.transform.position.x, this.EditorCamera.transform.position.y, 0);
							else
							{
								newGasCanister.transform.position = savePosition;
								newGasCanister.transform.eulerAngles = saveRotation;
								newGasCanister.transform.localScale = saveScale;
							}
							newGasCanister.AddComponent<BoxCollider>();


							newGasCanister.AddComponent<ObjectKickScript>().objType = 3;
							newGasCanister.AddComponent<GasCanisterScript>().explosionSize = 2;
							newGasCanister.GetComponent<ObjectKickScript>().bounceOnEnemyHit = true;
							newGasCanister.GetComponent<ObjectKickScript>().reactOnBulletHit = true;

							GasCanister = Instantiate(newGasCanister);
							GasCanister.SetActive(false);

							GasCanisters.Add(newGasCanister);
						}
						else
						{
							GameObject preloadedCanister = Instantiate(GasCanister);
							preloadedCanister.name = "GasCanister";

							preloadedCanister.SetActive(true);
							if(!isSaveObject)
							preloadedCanister.transform.position = new Vector3(this.EditorCamera.transform.position.x, this.EditorCamera.transform.position.y, 0);
							else
							{
								preloadedCanister.transform.position = savePosition;
								preloadedCanister.transform.eulerAngles = saveRotation;
								preloadedCanister.transform.localScale = saveScale;
							}
							GasCanisters.Add(preloadedCanister);
						}
						break;
					case "fryingpan":
						if(FryingPan == null)
						{
							GameObject newFryingPan = new GameObject();
							newFryingPan.name = "FryingPan";
							newFryingPan.AddComponent<MeshFilter>().mesh = FastObjImporter.Instance.ImportFile(MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/BaseGame/FryingPan.obj"));
							newFryingPan.AddComponent<MeshRenderer>();
							newFryingPan.GetComponent<MeshRenderer>().material = new Material(DefaultStandardShader);
							newFryingPan.GetComponent<MeshRenderer>().material.mainTexture = MFPEditorUtils.LoadPNG(LoadFileFromDataFolder("EditorAssets/BaseGame/textures/texture_collection_mediumshine_1.png"));
							if(!isSaveObject)
							newFryingPan.transform.position = new Vector3(this.EditorCamera.transform.position.x, this.EditorCamera.transform.position.y, 0);
							else
							{
								newFryingPan.transform.position = savePosition;
								newFryingPan.transform.eulerAngles = saveRotation;
								newFryingPan.transform.localScale = saveScale;
							}
							newFryingPan.transform.localScale = new Vector3(1.518284f,1.518284f,1.518284f);
							newFryingPan.AddComponent<BoxCollider>();
							newFryingPan.GetComponent<BoxCollider>().center = new Vector3(0.01f, 0.005344497f, 0.08489452f);
							newFryingPan.GetComponent<BoxCollider>().size = new Vector3(0.66f, 0.7002591f, 0.169789f);

							FryingPan = Instantiate(newFryingPan);
							FryingPan.SetActive(false);

							FryingPans.Add(newFryingPan);
						}
						else
						{
							GameObject preloadedPan = Instantiate(FryingPan);
							preloadedPan.SetActive(true);
							if(!isSaveObject)
							preloadedPan.transform.position = new Vector3(this.EditorCamera.transform.position.x, this.EditorCamera.transform.position.y, 0);
							else
							{
								preloadedPan.transform.position = savePosition;
								preloadedPan.transform.eulerAngles = saveRotation;
								preloadedPan.transform.localScale = saveScale;
							}
							FryingPans.Add(preloadedPan);
						}
						break;
				case "skateboard":
					if(Skateboard == null)
						{
							GameObject newSkateboard = new GameObject();
							newSkateboard.name = "Skateboard";
							newSkateboard.layer = 25;

							newSkateboard.AddComponent<MeshFilter>().mesh = FastObjImporter.Instance.ImportFile(MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/BaseGame/Skateboard.obj"));
							newSkateboard.AddComponent<MeshRenderer>();
							newSkateboard.GetComponent<MeshRenderer>().material = new Material(DefaultStandardShader);
							newSkateboard.GetComponent<MeshRenderer>().material.mainTexture = MFPEditorUtils.LoadPNG(LoadFileFromDataFolder("EditorAssets/BaseGame/textures/texture_collection_1.png"));
							if(!isSaveObject)
							newSkateboard.transform.position = new Vector3(this.EditorCamera.transform.position.x, this.EditorCamera.transform.position.y, 0);
							else
							{
								newSkateboard.transform.position = savePosition;
								newSkateboard.transform.eulerAngles = saveRotation;
								newSkateboard.transform.localScale = saveScale;
							}
							newSkateboard.AddComponent<BoxCollider>();
							newSkateboard.GetComponent<BoxCollider>().size = new Vector3(2.075f, 0.6727042f, 0.1303f);
							newSkateboard.GetComponent<BoxCollider>().center = new Vector3(-9.641704e-08f, -7.105427e-15f, 0.2079678f);
							newSkateboard.GetComponent<BoxCollider>().material = SkateboardTop;


							GameObject SkateboardSounds = new GameObject();
							SkateboardSounds.AddComponent<AudioSource>();
							SkateboardSounds.name = "Sounds";
							SkateboardSounds.transform.parent = newSkateboard.transform;

							GameObject FrontWheelCollision1 = new GameObject();
							FrontWheelCollision1.layer = 25;
							FrontWheelCollision1.name = "SkateFront1";
							FrontWheelCollision1.transform.parent = newSkateboard.transform;
							FrontWheelCollision1.transform.localPosition = new Vector3(0,0,0);
							CapsuleCollider ftcoll1 = FrontWheelCollision1.AddComponent<CapsuleCollider>();
							ftcoll1.material = Slippery;
							ftcoll1.center = new Vector3(0.75f, 0, 0.13f);
							ftcoll1.radius = 0.13f;
							ftcoll1.height = 0.4f;
							ftcoll1.direction = 1;

							GameObject skateshine = new GameObject();
							skateshine.name = "Skateboard_Shine";
							skateshine.transform.parent = newSkateboard.transform;

							GameObject FrontWheelCollision2 = new GameObject();
							FrontWheelCollision2.layer = 25;
							FrontWheelCollision2.name = "SkateFront2";
							FrontWheelCollision2.transform.parent = newSkateboard.transform;
							FrontWheelCollision2.transform.localPosition = new Vector3(0,0,0);
							CapsuleCollider ftcoll2 = FrontWheelCollision2.AddComponent<CapsuleCollider>();
							ftcoll2.material = Slippery;
							ftcoll2.center = new Vector3(1.04f, 0, 0.14f);
							ftcoll2.radius = 0.13f;
							ftcoll2.height = 0.4f;
							ftcoll2.direction = 1;


							GameObject BackWheelCollision1 = new GameObject();
							BackWheelCollision1.layer = 25;
							BackWheelCollision1.name = "SkateFront1";
							BackWheelCollision1.transform.parent = newSkateboard.transform;
							BackWheelCollision1.transform.localPosition = new Vector3(0,0,0);
							CapsuleCollider bkcoll1 = BackWheelCollision1.AddComponent<CapsuleCollider>();
							bkcoll1.material = Slippery;
							bkcoll1.center = new Vector3(-0.75f, 0, 0.13f);
							bkcoll1.radius = 0.13f;
							bkcoll1.height = 0.4f;
							bkcoll1.direction = 1;


							GameObject BackWheelCollision2 = new GameObject();
							BackWheelCollision2.layer = 25;
							BackWheelCollision2.name = "SkateFront2";
							BackWheelCollision2.transform.parent = newSkateboard.transform;
							BackWheelCollision2.transform.localPosition = new Vector3(0,0,0);
							CapsuleCollider bkcoll2 = BackWheelCollision2.AddComponent<CapsuleCollider>();
							bkcoll2.material = Slippery;
							bkcoll2.center = new Vector3(-1.04f, 0, 0.14f);
							bkcoll2.radius = 0.13f;
							bkcoll2.height = 0.4f;
							bkcoll2.direction = 1;

							ftcoll1.enabled = false;
							ftcoll2.enabled = false;
							bkcoll1.enabled = false;
							bkcoll2.enabled = false;
							

							Skateboard = Instantiate(newSkateboard);
							Skateboard.SetActive(false);
							Skateboards.Add(newSkateboard);
						}
						else
						{
							GameObject preloadedSkateboard = Instantiate(Skateboard);
							preloadedSkateboard.SetActive(true);
							if(!isSaveObject)
							preloadedSkateboard.transform.position = new Vector3(this.EditorCamera.transform.position.x, this.EditorCamera.transform.position.y, 0);
							else
							{
								preloadedSkateboard.transform.position = savePosition;
								preloadedSkateboard.transform.eulerAngles = saveRotation;
								preloadedSkateboard.transform.localScale = saveScale;
							}
							Skateboards.Add(preloadedSkateboard);
						}
					break;
					case "fliptable":

							//buggy right now so cant be spawned yet
							GameObject newFlipTable = new GameObject();
							newFlipTable.name = "FlipTable";
							newFlipTable.layer = 16;

							newFlipTable.AddComponent<MeshFilter>().mesh = FastObjImporter.Instance.ImportFile(MFPEditorUtils.LoadFileFromDataFolder("EditorAssets/BaseGame/FlipTable.obj"));
							newFlipTable.AddComponent<MeshRenderer>();
							newFlipTable.GetComponent<MeshRenderer>().material = new Material(DefaultStandardShader);
							newFlipTable.GetComponent<MeshRenderer>().material.mainTexture = MFPEditorUtils.LoadPNG(LoadFileFromDataFolder("EditorAssets/BaseGame/textures/texture_collection_1.png"));

							newFlipTable.AddComponent<BoxCollider>();
							newFlipTable.GetComponent<BoxCollider>().size = new Vector3(2.923683f, 1.986196f, 1.358783f);
							newFlipTable.GetComponent<BoxCollider>().center = new Vector3(-1.192093e-07f, -1.192093e-07f, 1.358783f);

							if(!isSaveObject)
							newFlipTable.transform.position = new Vector3(this.EditorCamera.transform.position.x, this.EditorCamera.transform.position.y, 0);
							else
							{
								newFlipTable.transform.position = savePosition;
								newFlipTable.transform.eulerAngles = saveRotation;
								newFlipTable.transform.localScale = saveScale;
							}

							newFlipTable.transform.eulerAngles = new Vector3(-90,0,0);


							newFlipTable.AddComponent<AudioSource>();
							newFlipTable.AddComponent<SoundScript>();

							levelFlipTables.Add(newFlipTable);
					break;

					case "light":
						GameObject newLight = new GameObject();
						newLight.AddComponent<MeshFilter>().mesh = lightModel;
						MeshRenderer meshRend = newLight.AddComponent<MeshRenderer>();
						meshRend.material = new Material(DefaultStandardShader);
						meshRend.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;
						meshRend.receiveShadows = false;

						newLight.AddComponent<Light>();
						newLight.AddComponent<BoxCollider>();

						newLight.name = "PointLight";

						if(!isSaveObject)
						newLight.transform.position = new Vector3(this.EditorCamera.transform.position.x, this.EditorCamera.transform.position.y, 0);
						else
						{
							newLight.transform.position = savePosition;
							newLight.transform.eulerAngles = saveRotation;
							newLight.transform.localScale = saveScale;
						}
			

					break;
				}

			}

		// Token: 0x06000627 RID: 1575
		protected string GetMD5HashFromFile(string fileName)
		{
			string result;
			using (MD5 md5 = MD5.Create())
			{
				using (FileStream stream = File.OpenRead(fileName))
				{
					result = BitConverter.ToString(md5.ComputeHash(stream)).Replace("-", string.Empty);
				}
			}
			return result;
		}

		// Token: 0x06000628 RID: 1576
		public void CalculateLevelHash()
		{
			string text = LevelEditorHandler.RemoveExcessCharacters(new string((from c in this.GetMD5HashFromFile(MFPEditorUtils.LoadFileFromDataFolder("Levels/default/level.txt"))
			where char.IsDigit(c) || c == '.' || c == ','
			select c).ToArray<char>()), 16);
			MFPEditorLogger.Log(text);
			ulong hashnumb = ulong.Parse(text);
			hashnumb = hashnumb % 150000UL + 200UL;
			MFPEditorLogger.Log(hashnumb.ToString());
			LevelEditorHandler.levelHash = (int)hashnumb;
			MFPEditorLogger.Log(LevelEditorHandler.levelHash.ToString());
		}

		// Token: 0x06000629 RID: 1577
		static LevelEditorHandler()
		{
		}

		// Token: 0x0600062A RID: 1578
		public static string RemoveExcessCharacters(string value, int maxLen)
		{
			if (value.Length <= maxLen)
			{
				return value;
			}
			return value.Substring(0, maxLen);
		}

		// Token: 0x060006DC RID: 1756 
		public void AdjustPostProcessing(bool postProcessEnabled, float bloomIntensity, bool allowColorGrading, Color32 SkyColor, bool allowFog)
		{
			if (postProcessEnabled)
			{
				this.Camera.GetComponent<PostProcessingBehaviour>().enabled = true;
				this.EditorCamera.GetComponent<PostProcessingBehaviour>().enabled = true;
				MFPEditorLogger.Log("Post processing is adjusted to be enabled");

				Camera.GetComponent<PostProcessingBehaviour>().profile.colorGrading.enabled = allowColorGrading;
				this.allowColorGrading = allowColorGrading;

			}
			else
			{
				this.Camera.GetComponent<PostProcessingBehaviour>().enabled = false;
				this.EditorCamera.GetComponent<PostProcessingBehaviour>().enabled = false;
				MFPEditorLogger.Log("Post processing is adjusted to be disabled");
			}

			Camera.GetComponent<PostProcessingBehaviour>().profile.fog.enabled = allowFog;	

			this.allowPostProcess = postProcessEnabled;
			BloomModel.Settings custombloom = this.Camera.GetComponent<PostProcessingBehaviour>().profile.bloom.settings;
			custombloom.bloom.intensity = bloomIntensity;
			this.Camera.GetComponent<PostProcessingBehaviour>().profile.bloom.settings = custombloom;

			BackgroundCamera.GetComponent<Camera>().backgroundColor = SkyColor;

		}

		// Token: 0x06000703 RID: 1795


		public string PropertiesWarmup(string objname)
		{
			if(EditingObject.name.Contains("Floor") || EditingObject.name.Contains("Wall"))
				return "floor";
			if(EditingObject.name == "EnemySpawner");
				return EditingObject.name;

			return "no";
		}


		public void ToggleSettingsMenu(string menuType, bool forceOff)
		{
			if(this.Editing && menuType != "properties")
				ExitEditMode();
			if(SnapToBuild)
				ToggleSnapping(false);

			if (forceOff)
			{
				this.WorldSettingsRoot.SetActive(false);
				this.EntitySpawnRoot.SetActive(false);
				this.PropertiesPanel.SetActive(false);
				this.LoadoutPanel.SetActive(false);
				this.adjustingSettings = false;
				return;
			}
			if (!this.adjustingSettings)
			{
				if (menuType == "world")
				{
					this.WorldSettingsRoot.SetActive(true);
					this.EntitySpawnRoot.SetActive(false);
					PropertiesPanel.SetActive(false);
				}
				if(menuType == "entities")
				{

					if(tutorialContinuing)
						{
							if(MFPLevelEditorTutorial.Inst != null)
								if(MFPLevelEditorTutorial.Inst.tutorialState != MFPLevelEditorTutorial.MFPTutorialState.PLACE_ENTITY)
									return;
						}

					this.WorldSettingsRoot.SetActive(false);
					this.EntitySpawnRoot.SetActive(true);
					PropertiesPanel.SetActive(false);
				}
				if(menuType == "properties")
				{

					if(tutorialContinuing)
						{
							if(MFPLevelEditorTutorial.Inst != null)
								if(MFPLevelEditorTutorial.Inst.tutorialState != MFPLevelEditorTutorial.MFPTutorialState.ADJUST_PROPERTIES)
									return;
						}

					MFPEditorLogger.Log("fired menu change");
					if(WorldSettingsRoot != null)
					WorldSettingsRoot.SetActive(false);
					if(EntitySpawnRoot != null)
					EntitySpawnRoot.SetActive(false);
					if(PropertiesPanel != null)
					PropertiesPanel.SetActive(true);

					PropertiesSetup(PropertiesWarmup(EditingObject.name));

				}
				if(menuType == "playerloadout")
				{
					this.WorldSettingsRoot.SetActive(false);
					this.EntitySpawnRoot.SetActive(false);
					this.PropertiesPanel.SetActive(false);
					this.LoadoutPanel.SetActive(true);
				}

				this.adjustingSettings = true;
				return;
			}
			else
			{
				this.WorldSettingsRoot.SetActive(false);
				this.EntitySpawnRoot.SetActive(false);
				this.PropertiesPanel.SetActive(false);
				this.LoadoutPanel.SetActive(false);

				this.adjustingSettings = false;
			}
		}



		public void ToggleHUD(bool toggle)
		{
			
			foreach (Canvas canvas in  GameObject.FindObjectsOfType<Canvas>())
			{
				switch(canvas.name)
				{
					case "WeaponSelector":
						if(toggle)
							canvas.enabled = true;
						else
							canvas.enabled = false;
						break;
					case "NewWeapon":
						if(toggle)
							canvas.enabled = true;
						else
							canvas.enabled = false;
						break;
					case "Cursors":
						if(toggle)
							canvas.enabled = true;
						else
							canvas.enabled = false;
						break;
					case "HealthAndSlowMo":
						if(toggle)
							canvas.enabled = true;
						else
							canvas.enabled = false;
						break;
					case "WeaponPanel":
						if(toggle)
							canvas.enabled = true;
						else
							canvas.enabled = false;
						break;
					case "ScoreHud":
						if(toggle)
							canvas.enabled = true;
						else
							canvas.enabled = false;
						break;
					case "DodgeAlert":
						if(toggle)
							canvas.enabled = true;
						else
							canvas.enabled = false;
						break;
					case "ScoreBloodHolder":
						if(toggle)
							canvas.enabled = true;
						else
							canvas.enabled = false;
						break;
					case "DamageCanvas":
						if(toggle)
							canvas.enabled = true;
						else
							canvas.enabled = false;
						break;
				}
			}
			
		}

		// Token: 0x04001338 RID: 4920
		public GameObject Player;

		// Token: 0x04001339 RID: 4921
		public GameObject Camera;
		public GameObject BackgroundCamera;
		// Token: 0x0400133A RID: 4922
		public GameObject HUD;

		// Token: 0x0400133B RID: 4923
		public GameObject RootShared;

		// Token: 0x0400133C RID: 4924
		public Camera EditorCamera;

		// Token: 0x0400133D RID: 4925
		public Text DebugObject;


		public GameObject EditingObject;
		public GameObject PreviousObject;
		public GameObject CopiedObject;

		// Token: 0x0400133F RID: 4927
		public InputField CoordinateField;

		// Token: 0x04001340 RID: 4928
		public bool Editing;

		// Token: 0x04001341 RID: 4929
		private string editType = "position";

		// Token: 0x04001342 RID: 4930
		public static LevelEditorHandler Inst;

		// Token: 0x04001343 RID: 4931
		public Transform PlayerSpawn;

		// Token: 0x04001344 RID: 4932
		public bool PlayMod;

		// Token: 0x04001345 RID: 4933
		public GameObject EnemySample;

		// Token: 0x04001346 RID: 4934
		public List<GameObject> Enemies = new List<GameObject>();

		// Token: 0x04001347 RID: 4935
		public List<Transform> EnemySpawnpoints = new List<Transform>();

		// Token: 0x04001348 RID: 4936
		public bool fart;

		// Token: 0x04001349 RID: 4937
		public GameObject FinishLevelTrigger;

		// Token: 0x0400134A RID: 4938
		public RootScript root;

		// Token: 0x0400134B RID: 4939
		public Mesh EditorAxeMesh;

		// Token: 0x0400134C RID: 4940
		public GameObject EditAxes;

		// Token: 0x0400134D RID: 4941
		public bool spawnpoints_saved;


		// Token: 0x0400134F RID: 4943
		public Texture2D DefaultTexture;

		// Token: 0x04001350 RID: 4944
		public GameObject EditorButtonsRoot;

		// Token: 0x04001351 RID: 4945
		public GameObject EntitySpawnRoot;

		// Token: 0x04001352 RID: 4946
		public int theme = 1;

		public bool allowPostProcess = true;
		public bool allowColorGrading = true;

		public bool allowFog = true;


		public bool SnapToBuild = false;

		// Token: 0x04001354 RID: 4948
		public static int levelHash = 55;

		// Token: 0x04001355 RID: 4949
		public static float levelTimer = 0f;

		// Token: 0x04001356 RID: 4950
		public static bool PlayerisDeadAndForceAutoLoad;

		// Token: 0x040013A2 RID: 5026
		public GameObject WorldSettingsRoot;

		// Token: 0x04001449 RID: 5193
		public bool adjustingSettings;

		// Token: 0x040014C3 RID: 5315
		public float bloomIntensity = 0.9f;
    
		public Color32 SkyColor;

		public Toggle allowPostProcessToggle;
		public Toggle allowColorGradingToggle;



//---------------------------------------GAMEPLAY-----------------------------------------//

		public MFPGamemode Gamemode = MFPGamemode.NORMAL;
		public PlayerScript playerScript;

//--------------------------------------------------LEGACY---------------------------------//
		public List<GameObject> BrushLump = new List<GameObject>();
	
//-----------------------------IMPROVED BUILDING DEPENDENCIES------------------------------//
		public GameObject SnapTarget;
			
		public List<GameObject> GeometryWallLump = new List<GameObject>();
		public List<GameObject> GeometryFloorLump = new List<GameObject>();

		public List<GameObject> GasCanisters = new List<GameObject>();
		public List<GameObject> LevelGasCanisters = new List<GameObject>();

		public List<GameObject> FryingPans = new List<GameObject>();
		public List<GameObject> LevelFryingPans = new List<GameObject>();

		public List<GameObject> Skateboards = new List<GameObject>();
		public List<GameObject> LevelSkateboards = new List<GameObject>();

		public List<GameObject> levelFlipTables = new List<GameObject>();
	
		public GameObject floor_Wood;
		

		public GameObject wall_Brick;


		//------------------- PRECACHED OBJECTS-------------------//
		public GameObject GasCanister;
		public GameObject FryingPan;
		public GameObject Skateboard;

		//PRELOADED CONTENT
		public Material DefaultStandardShader;
		public Font Arial;

		public PhysicMaterial Slippery = new PhysicMaterial();
		public PhysicMaterial SkateboardTop = new PhysicMaterial();


		public Mesh lightModel;

//------------------------------- IMPORTANT PANELS ------------------------------------
			public GameObject PropertiesPanel;
			public GameObject LoadoutPanel;
			
			public List<GameObject> propertyElements = new List<GameObject>();

			public Button propertiesButton;
			public Dropdown gamemodeDropdown;

	
			public Toggle testPistolToggle, dualPistolToggle, uziToggle, dualUziToggle, shotgunToggle, assaultRifleToggle, sniperToggle, crossbowToggle, shockRifleToggle, turretGunToggle;

//---------------------------------------------------------------------------------------
	
	public bool pistol, dualPistol, uzi, dualUzi, shotgun, assaultRifle, shockRifle, turretGun, crossbow, sniper;

//----------------------------

		// Token: 0x020000E2 RID: 226
		public enum CameraMode
		{
			// Token: 0x04001358 RID: 4952
			Disabled,
			// Token: 0x04001359 RID: 4953
			Enabled
		}
	}
}	