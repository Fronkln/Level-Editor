using System;
using UnityEngine;
using Jhrino.MFPLevelEditor;


// Token: 0x02000036 RID: 54
[Serializable]
public class DisappearPlatformScript : MonoBehaviour
{
	// Token: 0x0600012F RID: 303 RVA: 0x00002983 File Offset: 0x00000B83
	public DisappearPlatformScript()
	{
		this.hideTimer = (float)180;
	}

	// Token: 0x06000130 RID: 304 RVA: 0x00017F50 File Offset: 0x00016150
	public virtual void saveState()
	{
		this.timerS = this.timer;
		this.doHideS = this.doHide;
		this.steppedOnTimerS = this.steppedOnTimer;
		this.dipAmountS = this.dipAmount;
		this.theColliderEnabledS = this.theCollider.enabled;
		this.theRendererEnabledS = this.theRenderer.enabled;
	}

	// Token: 0x06000131 RID: 305 RVA: 0x00017FB0 File Offset: 0x000161B0
	public virtual void loadState()
	{
		this.timer = this.timerS;
		this.doHide = this.doHideS;
		this.steppedOnTimer = this.steppedOnTimerS;
		this.dipAmount = this.dipAmountS;
		this.theCollider.enabled = this.theColliderEnabledS;
		this.theRenderer.enabled = this.theRendererEnabledS;
	}

	// Token: 0x06000132 RID: 306 RVA: 0x00002997 File Offset: 0x00000B97
	public virtual void LateUpdate()
	{
		if (this.root.doCheckpointSave)
		{
			this.saveState();
		}
		if (this.root.doCheckpointLoad)
		{
			this.loadState();
		}
	}

	// Token: 0x06000133 RID: 307 RVA: 0x00018010 File Offset: 0x00016210
	public virtual void Start()
	{
		MFPEditorLogger.Log("Disappear platform start");
		this.root = (RootScript)GameObject.Find("Root").GetComponent(typeof(RootScript));
		MFPEditorLogger.Log("Disappear paltform root skrkrcript");
		this.playerScript = (PlayerScript)GameObject.Find("Player").GetComponent(typeof(PlayerScript));
		MFPEditorLogger.Log("Disappear platform blabla");
		this.theSound = (AudioSource)this.GetComponent(typeof(AudioSource));
		MFPEditorLogger.Log("Disappear platform I");
		this.startPos = this.transform.position;
		this.startScale = this.transform.localScale;
		this.startRot = this.transform.rotation;
		MFPEditorLogger.Log("Disappear platform II");
		this.theCollider = (MeshCollider)this.GetComponent(typeof(MeshCollider));
		MFPEditorLogger.Log("Disappear platform III");
		this.theRenderer = (MeshRenderer)this.GetComponent(typeof(MeshRenderer));
		MFPEditorLogger.Log("Disappear platform IV");
		this.randomTimeOffset = UnityEngine.Random.value * (float)10;

		MFPEditorLogger.Log("Disappear platform init complete");
	}

	// Token: 0x06000134 RID: 308 RVA: 0x000180F8 File Offset: 0x000162F8
	public virtual void Update()
	{
		if (this.playerScript.groundTransform == this.transform)
		{
			this.dipAmount = this.root.Damp(0.2f, this.dipAmount, 0.05f);
			this.steppedOnTimer = (float)3;
			this.transform.rotation = this.root.DampSlerp(this.startRot * Quaternion.Euler(-this.transform.InverseTransformPoint(this.playerScript.transform.position).y * (float)2, (float)0, (float)0), this.transform.rotation, 0.1f);
		}
		else
		{
			this.dipAmount = this.root.Damp(Mathf.Sin(Time.time + this.randomTimeOffset) * 0.1f, this.dipAmount, 0.1f);
			this.transform.rotation = this.root.DampSlerp(this.startRot * Quaternion.Euler(Mathf.Sin((Time.time + this.randomTimeOffset) / (float)2) * (float)2, (float)0, (float)0), this.transform.rotation, 0.1f);
			if (this.steppedOnTimer != (float)0)
			{
				this.steppedOnTimer -= this.root.timescale;
				if (this.steppedOnTimer <= (float)0)
				{
					this.doHide = true;
				}
			}
		}
		if (this.playerScript.groundTransform == this.transform && this.playerScript.justWallJumped)
		{
			this.doHide = true;
		}
		if (this.doHide)
		{
			if (!this.doHideDoOnce)
			{
				this.theSound.pitch = UnityEngine.Random.Range(0.4f, 0.9f);
				this.theSound.volume = UnityEngine.Random.Range(0.3f, 0.8f);
				this.theSound.Play();
				this.doHideDoOnce = true;
			}
			this.timer += this.root.timescale;
			if (this.timer >= this.hideTimer && this.hideTimer != (float)-1)
			{
				this.timer = (float)0;
				this.theRenderer.enabled = true;
				this.theCollider.enabled = true;
				this.doHide = false;
			}
			else
			{
				float y = this.transform.localScale.y - 0.1f * this.root.timescale;
				Vector3 localScale = this.transform.localScale;
				float num = localScale.y = y;
				Vector3 vector = this.transform.localScale = localScale;
				if (this.transform.localScale.y <= (float)0)
				{
					int num2 = 0;
					Vector3 localScale2 = this.transform.localScale;
					float num3 = localScale2.y = (float)num2;
					Vector3 vector2 = this.transform.localScale = localScale2;
					this.theRenderer.enabled = false;
					this.theCollider.enabled = false;
					this.steppedOnTimer = (float)0;
				}
			}
		}
		if (!this.doHide)
		{
			if (this.doHideDoOnce)
			{
				this.doHideDoOnce = false;
			}
			float y2 = this.transform.localScale.y + 0.1f * this.root.timescale;
			Vector3 localScale3 = this.transform.localScale;
			float num4 = localScale3.y = y2;
			Vector3 vector3 = this.transform.localScale = localScale3;
			if (this.transform.localScale.y > this.startScale.y)
			{
				float y3 = this.startScale.y;
				Vector3 localScale4 = this.transform.localScale;
				float num5 = localScale4.y = y3;
				Vector3 vector4 = this.transform.localScale = localScale4;
			}
			this.transform.position = this.startPos + Vector3.up * -this.dipAmount;
		}
	}

	// Token: 0x06000135 RID: 309 RVA: 0x000020A7 File Offset: 0x000002A7
	public virtual void Main()
	{
	}

	// Token: 0x04000306 RID: 774
	private RootScript root;

	// Token: 0x04000307 RID: 775
	private PlayerScript playerScript;

	// Token: 0x04000308 RID: 776
	private AudioSource theSound;

	// Token: 0x04000309 RID: 777
	private Vector3 startPos;

	// Token: 0x0400030A RID: 778
	private Vector3 startScale;

	// Token: 0x0400030B RID: 779
	private Quaternion startRot;

	// Token: 0x0400030C RID: 780
	private MeshCollider theCollider;

	// Token: 0x0400030D RID: 781
	public float hideTimer;

	// Token: 0x0400030E RID: 782
	private float timer;

	// Token: 0x0400030F RID: 783
	private bool doHide;

	// Token: 0x04000310 RID: 784
	private bool doHideDoOnce;

	// Token: 0x04000311 RID: 785
	private float steppedOnTimer;

	// Token: 0x04000312 RID: 786
	private MeshRenderer theRenderer;

	// Token: 0x04000313 RID: 787
	private float dipAmount;

	// Token: 0x04000314 RID: 788
	private float randomTimeOffset;

	// Token: 0x04000315 RID: 789
	private float timerS;

	// Token: 0x04000316 RID: 790
	private bool doHideS;

	// Token: 0x04000317 RID: 791
	private float steppedOnTimerS;

	// Token: 0x04000318 RID: 792
	private float dipAmountS;

	// Token: 0x04000319 RID: 793
	private bool theColliderEnabledS;

	// Token: 0x0400031A RID: 794
	private bool theRendererEnabledS;
}
